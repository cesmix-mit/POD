module name=poddesc1, target=x86-64-linux-avx-f16c-sse41
external_plus_metadata func poddesc1 (pairlist, pairnumsum, atomtype, alist, interactions, besselparams, Phi1, Phi2, y, nl, npairs, natom, bdegree, adegree, adegreep, tdegree1, tdegree2, nbesselparams, nelems, nelemsCombos, rin, rcut, eatom1, fatom1, eatom2, fatom2, eatom3, fatom3) {
assert((uint64)reinterpret((halide_buffer_t *)y.buffer) != (uint64)0, halide_error_buffer_argument_is_null("y"))
assert((uint64)reinterpret((halide_buffer_t *)pairnumsum.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pairnumsum"))
assert((uint64)reinterpret((halide_buffer_t *)pairlist.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pairlist"))
assert((uint64)reinterpret((halide_buffer_t *)interactions.buffer) != (uint64)0, halide_error_buffer_argument_is_null("interactions"))
assert((uint64)reinterpret((halide_buffer_t *)fatom3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("fatom3"))
assert((uint64)reinterpret((halide_buffer_t *)fatom2.buffer) != (uint64)0, halide_error_buffer_argument_is_null("fatom2"))
assert((uint64)reinterpret((halide_buffer_t *)fatom1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("fatom1"))
assert((uint64)reinterpret((halide_buffer_t *)eatom3.buffer) != (uint64)0, halide_error_buffer_argument_is_null("eatom3"))
assert((uint64)reinterpret((halide_buffer_t *)eatom2.buffer) != (uint64)0, halide_error_buffer_argument_is_null("eatom2"))
assert((uint64)reinterpret((halide_buffer_t *)eatom1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("eatom1"))
assert((uint64)reinterpret((halide_buffer_t *)besselparams.buffer) != (uint64)0, halide_error_buffer_argument_is_null("besselparams"))
assert((uint64)reinterpret((halide_buffer_t *)atomtype.buffer) != (uint64)0, halide_error_buffer_argument_is_null("atomtype"))
assert((uint64)reinterpret((halide_buffer_t *)alist.buffer) != (uint64)0, halide_error_buffer_argument_is_null("alist"))
assert((uint64)reinterpret((halide_buffer_t *)Phi2.buffer) != (uint64)0, halide_error_buffer_argument_is_null("Phi2"))
assert((uint64)reinterpret((halide_buffer_t *)Phi1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("Phi1"))
let Phi1 = (void *)_halide_buffer_get_host((halide_buffer_t *)Phi1.buffer)
let Phi1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)Phi1.buffer)
let Phi1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)Phi1.buffer)
let Phi1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)Phi1.buffer)
let Phi1.min.0 = _halide_buffer_get_min((halide_buffer_t *)Phi1.buffer, 0)
let Phi1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)Phi1.buffer, 0)
let Phi1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)Phi1.buffer, 0)
let Phi1.min.1 = _halide_buffer_get_min((halide_buffer_t *)Phi1.buffer, 1)
let Phi1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)Phi1.buffer, 1)
let Phi1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)Phi1.buffer, 1)
let Phi1.min.2 = _halide_buffer_get_min((halide_buffer_t *)Phi1.buffer, 2)
let Phi1.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)Phi1.buffer, 2)
let Phi1.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)Phi1.buffer, 2)
let Phi2 = (void *)_halide_buffer_get_host((halide_buffer_t *)Phi2.buffer)
let Phi2.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)Phi2.buffer)
let Phi2.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)Phi2.buffer)
let Phi2.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)Phi2.buffer)
let Phi2.min.0 = _halide_buffer_get_min((halide_buffer_t *)Phi2.buffer, 0)
let Phi2.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)Phi2.buffer, 0)
let Phi2.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)Phi2.buffer, 0)
let Phi2.min.1 = _halide_buffer_get_min((halide_buffer_t *)Phi2.buffer, 1)
let Phi2.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)Phi2.buffer, 1)
let Phi2.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)Phi2.buffer, 1)
let alist = (void *)_halide_buffer_get_host((halide_buffer_t *)alist.buffer)
let alist.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)alist.buffer)
let alist.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)alist.buffer)
let alist.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)alist.buffer)
let alist.min.0 = _halide_buffer_get_min((halide_buffer_t *)alist.buffer, 0)
let alist.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)alist.buffer, 0)
let alist.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)alist.buffer, 0)
let atomtype = (void *)_halide_buffer_get_host((halide_buffer_t *)atomtype.buffer)
let atomtype.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)atomtype.buffer)
let atomtype.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)atomtype.buffer)
let atomtype.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)atomtype.buffer)
let atomtype.min.0 = _halide_buffer_get_min((halide_buffer_t *)atomtype.buffer, 0)
let atomtype.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)atomtype.buffer, 0)
let atomtype.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)atomtype.buffer, 0)
let besselparams = (void *)_halide_buffer_get_host((halide_buffer_t *)besselparams.buffer)
let besselparams.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)besselparams.buffer)
let besselparams.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)besselparams.buffer)
let besselparams.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)besselparams.buffer)
let besselparams.min.0 = _halide_buffer_get_min((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)besselparams.buffer, 0)
let besselparams.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)besselparams.buffer, 0)
let eatom1 = (void *)_halide_buffer_get_host((halide_buffer_t *)eatom1.buffer)
let eatom1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)eatom1.buffer)
let eatom1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)eatom1.buffer)
let eatom1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)eatom1.buffer)
let eatom1.min.0 = _halide_buffer_get_min((halide_buffer_t *)eatom1.buffer, 0)
let eatom1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)eatom1.buffer, 0)
let eatom1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)eatom1.buffer, 0)
let eatom1.min.1 = _halide_buffer_get_min((halide_buffer_t *)eatom1.buffer, 1)
let eatom1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)eatom1.buffer, 1)
let eatom1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)eatom1.buffer, 1)
let eatom2 = (void *)_halide_buffer_get_host((halide_buffer_t *)eatom2.buffer)
let eatom2.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)eatom2.buffer)
let eatom2.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)eatom2.buffer)
let eatom2.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)eatom2.buffer)
let eatom2.min.0 = _halide_buffer_get_min((halide_buffer_t *)eatom2.buffer, 0)
let eatom2.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)eatom2.buffer, 0)
let eatom2.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)eatom2.buffer, 0)
let eatom2.min.1 = _halide_buffer_get_min((halide_buffer_t *)eatom2.buffer, 1)
let eatom2.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)eatom2.buffer, 1)
let eatom2.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)eatom2.buffer, 1)
let eatom2.min.2 = _halide_buffer_get_min((halide_buffer_t *)eatom2.buffer, 2)
let eatom2.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)eatom2.buffer, 2)
let eatom2.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)eatom2.buffer, 2)
let eatom3 = (void *)_halide_buffer_get_host((halide_buffer_t *)eatom3.buffer)
let eatom3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)eatom3.buffer)
let eatom3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)eatom3.buffer)
let eatom3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)eatom3.buffer)
let eatom3.min.0 = _halide_buffer_get_min((halide_buffer_t *)eatom3.buffer, 0)
let eatom3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)eatom3.buffer, 0)
let eatom3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)eatom3.buffer, 0)
let eatom3.min.1 = _halide_buffer_get_min((halide_buffer_t *)eatom3.buffer, 1)
let eatom3.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)eatom3.buffer, 1)
let eatom3.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)eatom3.buffer, 1)
let eatom3.min.2 = _halide_buffer_get_min((halide_buffer_t *)eatom3.buffer, 2)
let eatom3.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)eatom3.buffer, 2)
let eatom3.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)eatom3.buffer, 2)
let eatom3.min.3 = _halide_buffer_get_min((halide_buffer_t *)eatom3.buffer, 3)
let eatom3.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)eatom3.buffer, 3)
let eatom3.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)eatom3.buffer, 3)
let eatom3.min.4 = _halide_buffer_get_min((halide_buffer_t *)eatom3.buffer, 4)
let eatom3.extent.4 = _halide_buffer_get_extent((halide_buffer_t *)eatom3.buffer, 4)
let eatom3.stride.4 = _halide_buffer_get_stride((halide_buffer_t *)eatom3.buffer, 4)
let fatom1 = (void *)_halide_buffer_get_host((halide_buffer_t *)fatom1.buffer)
let fatom1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)fatom1.buffer)
let fatom1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)fatom1.buffer)
let fatom1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)fatom1.buffer)
let fatom1.min.0 = _halide_buffer_get_min((halide_buffer_t *)fatom1.buffer, 0)
let fatom1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)fatom1.buffer, 0)
let fatom1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)fatom1.buffer, 0)
let fatom1.min.1 = _halide_buffer_get_min((halide_buffer_t *)fatom1.buffer, 1)
let fatom1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)fatom1.buffer, 1)
let fatom1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)fatom1.buffer, 1)
let fatom1.min.2 = _halide_buffer_get_min((halide_buffer_t *)fatom1.buffer, 2)
let fatom1.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)fatom1.buffer, 2)
let fatom1.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)fatom1.buffer, 2)
let fatom2 = (void *)_halide_buffer_get_host((halide_buffer_t *)fatom2.buffer)
let fatom2.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)fatom2.buffer)
let fatom2.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)fatom2.buffer)
let fatom2.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)fatom2.buffer)
let fatom2.min.0 = _halide_buffer_get_min((halide_buffer_t *)fatom2.buffer, 0)
let fatom2.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)fatom2.buffer, 0)
let fatom2.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)fatom2.buffer, 0)
let fatom2.min.1 = _halide_buffer_get_min((halide_buffer_t *)fatom2.buffer, 1)
let fatom2.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)fatom2.buffer, 1)
let fatom2.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)fatom2.buffer, 1)
let fatom2.min.2 = _halide_buffer_get_min((halide_buffer_t *)fatom2.buffer, 2)
let fatom2.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)fatom2.buffer, 2)
let fatom2.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)fatom2.buffer, 2)
let fatom2.min.3 = _halide_buffer_get_min((halide_buffer_t *)fatom2.buffer, 3)
let fatom2.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)fatom2.buffer, 3)
let fatom2.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)fatom2.buffer, 3)
let fatom3 = (void *)_halide_buffer_get_host((halide_buffer_t *)fatom3.buffer)
let fatom3.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)fatom3.buffer)
let fatom3.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)fatom3.buffer)
let fatom3.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)fatom3.buffer)
let fatom3.min.0 = _halide_buffer_get_min((halide_buffer_t *)fatom3.buffer, 0)
let fatom3.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)fatom3.buffer, 0)
let fatom3.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)fatom3.buffer, 0)
let fatom3.min.1 = _halide_buffer_get_min((halide_buffer_t *)fatom3.buffer, 1)
let fatom3.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)fatom3.buffer, 1)
let fatom3.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)fatom3.buffer, 1)
let fatom3.min.2 = _halide_buffer_get_min((halide_buffer_t *)fatom3.buffer, 2)
let fatom3.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)fatom3.buffer, 2)
let fatom3.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)fatom3.buffer, 2)
let fatom3.min.3 = _halide_buffer_get_min((halide_buffer_t *)fatom3.buffer, 3)
let fatom3.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)fatom3.buffer, 3)
let fatom3.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)fatom3.buffer, 3)
let fatom3.min.4 = _halide_buffer_get_min((halide_buffer_t *)fatom3.buffer, 4)
let fatom3.extent.4 = _halide_buffer_get_extent((halide_buffer_t *)fatom3.buffer, 4)
let fatom3.stride.4 = _halide_buffer_get_stride((halide_buffer_t *)fatom3.buffer, 4)
let fatom3.min.5 = _halide_buffer_get_min((halide_buffer_t *)fatom3.buffer, 5)
let fatom3.extent.5 = _halide_buffer_get_extent((halide_buffer_t *)fatom3.buffer, 5)
let fatom3.stride.5 = _halide_buffer_get_stride((halide_buffer_t *)fatom3.buffer, 5)
let interactions = (void *)_halide_buffer_get_host((halide_buffer_t *)interactions.buffer)
let interactions.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)interactions.buffer)
let interactions.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)interactions.buffer)
let interactions.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)interactions.buffer)
let interactions.min.0 = _halide_buffer_get_min((halide_buffer_t *)interactions.buffer, 0)
let interactions.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)interactions.buffer, 0)
let interactions.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)interactions.buffer, 0)
let interactions.min.1 = _halide_buffer_get_min((halide_buffer_t *)interactions.buffer, 1)
let interactions.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)interactions.buffer, 1)
let interactions.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)interactions.buffer, 1)
let pairlist = (void *)_halide_buffer_get_host((halide_buffer_t *)pairlist.buffer)
let pairlist.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pairlist.buffer)
let pairlist.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pairlist.buffer)
let pairlist.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pairlist.buffer)
let pairlist.min.0 = _halide_buffer_get_min((halide_buffer_t *)pairlist.buffer, 0)
let pairlist.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pairlist.buffer, 0)
let pairlist.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pairlist.buffer, 0)
let pairnumsum = (void *)_halide_buffer_get_host((halide_buffer_t *)pairnumsum.buffer)
let pairnumsum.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pairnumsum.buffer)
let pairnumsum.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pairnumsum.buffer)
let pairnumsum.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pairnumsum.buffer)
let pairnumsum.min.0 = _halide_buffer_get_min((halide_buffer_t *)pairnumsum.buffer, 0)
let pairnumsum.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pairnumsum.buffer, 0)
let pairnumsum.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pairnumsum.buffer, 0)
let y = (void *)_halide_buffer_get_host((halide_buffer_t *)y.buffer)
let y.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)y.buffer)
let y.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)y.buffer)
let y.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)y.buffer)
let y.min.0 = _halide_buffer_get_min((halide_buffer_t *)y.buffer, 0)
let y.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)y.buffer, 0)
let y.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)y.buffer, 0)
let y.min.1 = _halide_buffer_get_min((halide_buffer_t *)y.buffer, 1)
let y.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)y.buffer, 1)
let y.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)y.buffer, 1)
let forceij_f.s2.basis function index.max.s = max(tdegree1, tdegree2)
let eatom3.stride.4.required = ((natom*nelemsCombos)*nelems)*(adegreep + 1)
let y.extent.0.required.s = max(natom*nl, natom)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi1.buffer) || (bdegree <= nbesselparams), halide_error_constraints_make_required_region_smaller("Input buffer Phi1", 0, 0, nbesselparams + -1, 0, bdegree + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi1.buffer) || (nbesselparams <= bdegree), halide_error_constraints_make_required_region_smaller("Input buffer Phi1", 1, 0, bdegree + -1, 0, nbesselparams + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)alist.buffer) || (1 <= (natom*nl)), let t4302 = (natom*nl) in halide_error_constraints_make_required_region_smaller("Input buffer alist", 0, 0, t4302 + -1, 0, max(t4302, 1) + -1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)atomtype.buffer) || (1 <= natom), halide_error_constraints_make_required_region_smaller("Input buffer atomtype", 0, 0, natom + -1, 0, 0))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)interactions.buffer) || (1 <= nelems), halide_error_constraints_make_required_region_smaller("Input buffer interactions", 0, 0, nelems + -1, 0, 0))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)y.buffer) || (max(y.extent.0.required.s, 1) <= (natom*nl)), halide_error_constraints_make_required_region_smaller("Input buffer y", 0, 0, (natom*nl) + -1, 0, max(y.extent.0.required.s, 1) + -1))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)Phi1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)Phi1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, nbesselparams, 1, 0, 0, bdegree, bdegree, 0, 0, forceij_f.s2.basis function index.max.s, bdegree*nbesselparams, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi2.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)Phi2.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)Phi2.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, adegree, 1, 0, 0, forceij_f.s2.basis function index.max.s, adegree, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)alist.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)alist.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)alist.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, natom*nl, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)atomtype.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)atomtype.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)atomtype.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, natom, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)besselparams.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)besselparams.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 1, (halide_dimension_t *)make_struct(0, nbesselparams, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)eatom1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)eatom1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)eatom1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, natom, 1, 0, 0, nelems, natom, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)eatom2.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)eatom2.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)eatom2.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, natom, 1, 0, 0, nelemsCombos, natom, 0, 0, tdegree1, natom*nelemsCombos, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)eatom3.buffer)) {
 let t4303 = (natom*nelemsCombos) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)eatom3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)eatom3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 5, (halide_dimension_t *)make_struct(0, natom, 1, 0, 0, nelemsCombos, natom, 0, 0, nelems, t4303, 0, 0, adegreep + 1, t4303*nelems, 0, 0, tdegree2, eatom3.stride.4.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fatom1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)fatom1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)fatom1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 3, (halide_dimension_t *)make_struct(0, natom, 1, 0, 0, nelems, natom, 0, 0, 3, natom*nelems, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fatom2.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)fatom2.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)fatom2.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 4, (halide_dimension_t *)make_struct(0, 3, 1, 0, 0, natom, 3, 0, 0, nelemsCombos, natom*3, 0, 0, tdegree1, (natom*nelemsCombos)*3, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fatom3.buffer)) {
 let t4304 = (natom*nelemsCombos) in (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)fatom3.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)fatom3.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 6, (halide_dimension_t *)make_struct(0, 3, 1, 0, 0, natom, 3, 0, 0, nelemsCombos, natom*3, 0, 0, nelems, t4304*3, 0, 0, adegreep + 1, (t4304*nelems)*3, 0, 0, tdegree2, eatom3.stride.4.required*3, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)interactions.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)interactions.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)interactions.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 2, (halide_dimension_t *)make_struct(0, nelems, 1, 0, 0, nelems, max(nelems, 1), 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pairlist.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pairlist.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pairlist.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, npairs, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pairnumsum.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pairnumsum.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pairnumsum.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(0, natom + 1, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)y.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)y.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)y.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 64, 2, (halide_dimension_t *)make_struct(0, natom*nl, 1, 0, 0, 3, max(y.extent.0.required.s, 1), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)y.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pairnumsum.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pairlist.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)interactions.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fatom3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fatom2.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)fatom1.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)eatom3.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)eatom2.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)eatom1.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)besselparams.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)atomtype.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)alist.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi1.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)Phi2.buffer)))))))))))))))) {
 assert(Phi1.type == (uint32)81922, halide_error_bad_type("Input buffer Phi1", Phi1.type, (uint32)81922))
 assert(Phi1.dimensions == 3, halide_error_bad_dimensions("Input buffer Phi1", Phi1.dimensions, 3))
 assert(Phi2.type == (uint32)81922, halide_error_bad_type("Input buffer Phi2", Phi2.type, (uint32)81922))
 assert(Phi2.dimensions == 2, halide_error_bad_dimensions("Input buffer Phi2", Phi2.dimensions, 2))
 assert(alist.type == (uint32)73728, halide_error_bad_type("Input buffer alist", alist.type, (uint32)73728))
 assert(alist.dimensions == 1, halide_error_bad_dimensions("Input buffer alist", alist.dimensions, 1))
 assert(atomtype.type == (uint32)73728, halide_error_bad_type("Input buffer atomtype", atomtype.type, (uint32)73728))
 assert(atomtype.dimensions == 1, halide_error_bad_dimensions("Input buffer atomtype", atomtype.dimensions, 1))
 assert(besselparams.type == (uint32)81922, halide_error_bad_type("Input buffer besselparams", besselparams.type, (uint32)81922))
 assert(besselparams.dimensions == 1, halide_error_bad_dimensions("Input buffer besselparams", besselparams.dimensions, 1))
 assert(eatom1.type == (uint32)81922, halide_error_bad_type("Output buffer eatom1", eatom1.type, (uint32)81922))
 assert(eatom1.dimensions == 2, halide_error_bad_dimensions("Output buffer eatom1", eatom1.dimensions, 2))
 assert(eatom2.type == (uint32)81922, halide_error_bad_type("Output buffer eatom2", eatom2.type, (uint32)81922))
 assert(eatom2.dimensions == 3, halide_error_bad_dimensions("Output buffer eatom2", eatom2.dimensions, 3))
 assert(eatom3.type == (uint32)81922, halide_error_bad_type("Output buffer eatom3", eatom3.type, (uint32)81922))
 assert(eatom3.dimensions == 5, halide_error_bad_dimensions("Output buffer eatom3", eatom3.dimensions, 5))
 assert(fatom1.type == (uint32)81922, halide_error_bad_type("Output buffer fatom1", fatom1.type, (uint32)81922))
 assert(fatom1.dimensions == 3, halide_error_bad_dimensions("Output buffer fatom1", fatom1.dimensions, 3))
 assert(fatom2.type == (uint32)81922, halide_error_bad_type("Output buffer fatom2", fatom2.type, (uint32)81922))
 assert(fatom2.dimensions == 4, halide_error_bad_dimensions("Output buffer fatom2", fatom2.dimensions, 4))
 assert(fatom3.type == (uint32)81922, halide_error_bad_type("Output buffer fatom3", fatom3.type, (uint32)81922))
 assert(fatom3.dimensions == 6, halide_error_bad_dimensions("Output buffer fatom3", fatom3.dimensions, 6))
 assert(interactions.type == (uint32)73728, halide_error_bad_type("Input buffer interactions", interactions.type, (uint32)73728))
 assert(interactions.dimensions == 2, halide_error_bad_dimensions("Input buffer interactions", interactions.dimensions, 2))
 assert(pairlist.type == (uint32)73728, halide_error_bad_type("Input buffer pairlist", pairlist.type, (uint32)73728))
 assert(pairlist.dimensions == 1, halide_error_bad_dimensions("Input buffer pairlist", pairlist.dimensions, 1))
 assert(pairnumsum.type == (uint32)73728, halide_error_bad_type("Input buffer pairnumsum", pairnumsum.type, (uint32)73728))
 assert(pairnumsum.dimensions == 1, halide_error_bad_dimensions("Input buffer pairnumsum", pairnumsum.dimensions, 1))
 assert(y.type == (uint32)81922, halide_error_bad_type("Input buffer y", y.type, (uint32)81922))
 assert(y.dimensions == 2, halide_error_bad_dimensions("Input buffer y", y.dimensions, 2))
 assert((Phi1.min.0 <= 0) && (bdegree <= (Phi1.extent.0 + Phi1.min.0)), halide_error_access_out_of_bounds("Input buffer Phi1", 0, 0, bdegree + -1, Phi1.min.0, (Phi1.extent.0 + Phi1.min.0) + -1))
 assert(0 <= Phi1.extent.0, halide_error_buffer_extents_negative("Input buffer Phi1", 0, Phi1.extent.0))
 assert((Phi1.min.1 <= 0) && (nbesselparams <= (Phi1.extent.1 + Phi1.min.1)), halide_error_access_out_of_bounds("Input buffer Phi1", 1, 0, nbesselparams + -1, Phi1.min.1, (Phi1.extent.1 + Phi1.min.1) + -1))
 assert(0 <= Phi1.extent.1, halide_error_buffer_extents_negative("Input buffer Phi1", 1, Phi1.extent.1))
 assert((Phi1.min.2 <= 0) && (forceij_f.s2.basis function index.max.s <= (Phi1.extent.2 + Phi1.min.2)), halide_error_access_out_of_bounds("Input buffer Phi1", 2, 0, forceij_f.s2.basis function index.max.s + -1, Phi1.min.2, (Phi1.extent.2 + Phi1.min.2) + -1))
 assert(0 <= Phi1.extent.2, halide_error_buffer_extents_negative("Input buffer Phi1", 2, Phi1.extent.2))
 assert((Phi2.min.0 <= 0) && (adegree <= (Phi2.extent.0 + Phi2.min.0)), halide_error_access_out_of_bounds("Input buffer Phi2", 0, 0, adegree + -1, Phi2.min.0, (Phi2.extent.0 + Phi2.min.0) + -1))
 assert(0 <= Phi2.extent.0, halide_error_buffer_extents_negative("Input buffer Phi2", 0, Phi2.extent.0))
 assert((Phi2.min.1 <= 0) && (forceij_f.s2.basis function index.max.s <= (Phi2.extent.1 + Phi2.min.1)), halide_error_access_out_of_bounds("Input buffer Phi2", 1, 0, forceij_f.s2.basis function index.max.s + -1, Phi2.min.1, (Phi2.extent.1 + Phi2.min.1) + -1))
 assert(0 <= Phi2.extent.1, halide_error_buffer_extents_negative("Input buffer Phi2", 1, Phi2.extent.1))
 assert((alist.min.0 <= 0) && (max(natom*nl, 1) <= (alist.extent.0 + alist.min.0)), halide_error_access_out_of_bounds("Input buffer alist", 0, 0, max(natom*nl, 1) + -1, alist.min.0, (alist.extent.0 + alist.min.0) + -1))
 assert(0 <= alist.extent.0, halide_error_buffer_extents_negative("Input buffer alist", 0, alist.extent.0))
 assert((atomtype.min.0 <= 0) && (max(natom, 1) <= (atomtype.extent.0 + atomtype.min.0)), halide_error_access_out_of_bounds("Input buffer atomtype", 0, 0, max(natom, 1) + -1, atomtype.min.0, (atomtype.extent.0 + atomtype.min.0) + -1))
 assert(0 <= atomtype.extent.0, halide_error_buffer_extents_negative("Input buffer atomtype", 0, atomtype.extent.0))
 assert((besselparams.min.0 <= 0) && (nbesselparams <= (besselparams.extent.0 + besselparams.min.0)), halide_error_access_out_of_bounds("Input buffer besselparams", 0, 0, nbesselparams + -1, besselparams.min.0, (besselparams.extent.0 + besselparams.min.0) + -1))
 assert(0 <= besselparams.extent.0, halide_error_buffer_extents_negative("Input buffer besselparams", 0, besselparams.extent.0))
 assert((eatom1.min.0 <= 0) && (natom <= (eatom1.extent.0 + eatom1.min.0)), halide_error_access_out_of_bounds("Output buffer eatom1", 0, 0, natom + -1, eatom1.min.0, (eatom1.extent.0 + eatom1.min.0) + -1))
 assert(0 <= eatom1.extent.0, halide_error_buffer_extents_negative("Output buffer eatom1", 0, eatom1.extent.0))
 assert((eatom1.min.1 <= 0) && (nelems <= (eatom1.extent.1 + eatom1.min.1)), halide_error_access_out_of_bounds("Output buffer eatom1", 1, 0, nelems + -1, eatom1.min.1, (eatom1.extent.1 + eatom1.min.1) + -1))
 assert(0 <= eatom1.extent.1, halide_error_buffer_extents_negative("Output buffer eatom1", 1, eatom1.extent.1))
 assert((eatom2.min.0 <= 0) && (natom <= (eatom2.extent.0 + eatom2.min.0)), halide_error_access_out_of_bounds("Output buffer eatom2", 0, 0, natom + -1, eatom2.min.0, (eatom2.extent.0 + eatom2.min.0) + -1))
 assert(0 <= eatom2.extent.0, halide_error_buffer_extents_negative("Output buffer eatom2", 0, eatom2.extent.0))
 assert((eatom2.min.1 <= 0) && (nelemsCombos <= (eatom2.extent.1 + eatom2.min.1)), halide_error_access_out_of_bounds("Output buffer eatom2", 1, 0, nelemsCombos + -1, eatom2.min.1, (eatom2.extent.1 + eatom2.min.1) + -1))
 assert(0 <= eatom2.extent.1, halide_error_buffer_extents_negative("Output buffer eatom2", 1, eatom2.extent.1))
 assert((eatom2.min.2 <= 0) && (tdegree1 <= (eatom2.extent.2 + eatom2.min.2)), halide_error_access_out_of_bounds("Output buffer eatom2", 2, 0, tdegree1 + -1, eatom2.min.2, (eatom2.extent.2 + eatom2.min.2) + -1))
 assert(0 <= eatom2.extent.2, halide_error_buffer_extents_negative("Output buffer eatom2", 2, eatom2.extent.2))
 assert((eatom3.min.0 <= 0) && (natom <= (eatom3.extent.0 + eatom3.min.0)), halide_error_access_out_of_bounds("Output buffer eatom3", 0, 0, natom + -1, eatom3.min.0, (eatom3.extent.0 + eatom3.min.0) + -1))
 assert(0 <= eatom3.extent.0, halide_error_buffer_extents_negative("Output buffer eatom3", 0, eatom3.extent.0))
 assert((eatom3.min.1 <= 0) && (nelemsCombos <= (eatom3.extent.1 + eatom3.min.1)), halide_error_access_out_of_bounds("Output buffer eatom3", 1, 0, nelemsCombos + -1, eatom3.min.1, (eatom3.extent.1 + eatom3.min.1) + -1))
 assert(0 <= eatom3.extent.1, halide_error_buffer_extents_negative("Output buffer eatom3", 1, eatom3.extent.1))
 assert((eatom3.min.2 <= 0) && (nelems <= (eatom3.extent.2 + eatom3.min.2)), halide_error_access_out_of_bounds("Output buffer eatom3", 2, 0, nelems + -1, eatom3.min.2, (eatom3.extent.2 + eatom3.min.2) + -1))
 assert(0 <= eatom3.extent.2, halide_error_buffer_extents_negative("Output buffer eatom3", 2, eatom3.extent.2))
 assert((eatom3.min.3 <= 0) && ((adegreep + 1) <= (eatom3.extent.3 + eatom3.min.3)), halide_error_access_out_of_bounds("Output buffer eatom3", 3, 0, adegreep, eatom3.min.3, (eatom3.extent.3 + eatom3.min.3) + -1))
 assert(0 <= eatom3.extent.3, halide_error_buffer_extents_negative("Output buffer eatom3", 3, eatom3.extent.3))
 assert((eatom3.min.4 <= 0) && (tdegree2 <= (eatom3.extent.4 + eatom3.min.4)), halide_error_access_out_of_bounds("Output buffer eatom3", 4, 0, tdegree2 + -1, eatom3.min.4, (eatom3.extent.4 + eatom3.min.4) + -1))
 assert(0 <= eatom3.extent.4, halide_error_buffer_extents_negative("Output buffer eatom3", 4, eatom3.extent.4))
 assert((fatom1.min.0 <= 0) && (natom <= (fatom1.extent.0 + fatom1.min.0)), halide_error_access_out_of_bounds("Output buffer fatom1", 0, 0, natom + -1, fatom1.min.0, (fatom1.extent.0 + fatom1.min.0) + -1))
 assert(0 <= fatom1.extent.0, halide_error_buffer_extents_negative("Output buffer fatom1", 0, fatom1.extent.0))
 assert((fatom1.min.1 <= 0) && (nelems <= (fatom1.extent.1 + fatom1.min.1)), halide_error_access_out_of_bounds("Output buffer fatom1", 1, 0, nelems + -1, fatom1.min.1, (fatom1.extent.1 + fatom1.min.1) + -1))
 assert(0 <= fatom1.extent.1, halide_error_buffer_extents_negative("Output buffer fatom1", 1, fatom1.extent.1))
 assert((fatom1.min.2 <= 0) && (3 <= (fatom1.extent.2 + fatom1.min.2)), halide_error_access_out_of_bounds("Output buffer fatom1", 2, 0, 2, fatom1.min.2, (fatom1.extent.2 + fatom1.min.2) + -1))
 assert(0 <= fatom1.extent.2, halide_error_buffer_extents_negative("Output buffer fatom1", 2, fatom1.extent.2))
 assert((fatom2.min.0 <= 0) && (3 <= (fatom2.extent.0 + fatom2.min.0)), halide_error_access_out_of_bounds("Output buffer fatom2", 0, 0, 2, fatom2.min.0, (fatom2.extent.0 + fatom2.min.0) + -1))
 assert(0 <= fatom2.extent.0, halide_error_buffer_extents_negative("Output buffer fatom2", 0, fatom2.extent.0))
 assert((fatom2.min.1 <= 0) && (natom <= (fatom2.extent.1 + fatom2.min.1)), halide_error_access_out_of_bounds("Output buffer fatom2", 1, 0, natom + -1, fatom2.min.1, (fatom2.extent.1 + fatom2.min.1) + -1))
 assert(0 <= fatom2.extent.1, halide_error_buffer_extents_negative("Output buffer fatom2", 1, fatom2.extent.1))
 assert((fatom2.min.2 <= 0) && (nelemsCombos <= (fatom2.extent.2 + fatom2.min.2)), halide_error_access_out_of_bounds("Output buffer fatom2", 2, 0, nelemsCombos + -1, fatom2.min.2, (fatom2.extent.2 + fatom2.min.2) + -1))
 assert(0 <= fatom2.extent.2, halide_error_buffer_extents_negative("Output buffer fatom2", 2, fatom2.extent.2))
 assert((fatom2.min.3 <= 0) && (tdegree1 <= (fatom2.extent.3 + fatom2.min.3)), halide_error_access_out_of_bounds("Output buffer fatom2", 3, 0, tdegree1 + -1, fatom2.min.3, (fatom2.extent.3 + fatom2.min.3) + -1))
 assert(0 <= fatom2.extent.3, halide_error_buffer_extents_negative("Output buffer fatom2", 3, fatom2.extent.3))
 assert((fatom3.min.0 <= 0) && (3 <= (fatom3.extent.0 + fatom3.min.0)), halide_error_access_out_of_bounds("Output buffer fatom3", 0, 0, 2, fatom3.min.0, (fatom3.extent.0 + fatom3.min.0) + -1))
 assert(0 <= fatom3.extent.0, halide_error_buffer_extents_negative("Output buffer fatom3", 0, fatom3.extent.0))
 assert((fatom3.min.1 <= 0) && (natom <= (fatom3.extent.1 + fatom3.min.1)), halide_error_access_out_of_bounds("Output buffer fatom3", 1, 0, natom + -1, fatom3.min.1, (fatom3.extent.1 + fatom3.min.1) + -1))
 assert(0 <= fatom3.extent.1, halide_error_buffer_extents_negative("Output buffer fatom3", 1, fatom3.extent.1))
 assert((fatom3.min.2 <= 0) && (nelemsCombos <= (fatom3.extent.2 + fatom3.min.2)), halide_error_access_out_of_bounds("Output buffer fatom3", 2, 0, nelemsCombos + -1, fatom3.min.2, (fatom3.extent.2 + fatom3.min.2) + -1))
 assert(0 <= fatom3.extent.2, halide_error_buffer_extents_negative("Output buffer fatom3", 2, fatom3.extent.2))
 assert((fatom3.min.3 <= 0) && (nelems <= (fatom3.extent.3 + fatom3.min.3)), halide_error_access_out_of_bounds("Output buffer fatom3", 3, 0, nelems + -1, fatom3.min.3, (fatom3.extent.3 + fatom3.min.3) + -1))
 assert(0 <= fatom3.extent.3, halide_error_buffer_extents_negative("Output buffer fatom3", 3, fatom3.extent.3))
 assert((fatom3.min.4 <= 0) && ((adegreep + 1) <= (fatom3.extent.4 + fatom3.min.4)), halide_error_access_out_of_bounds("Output buffer fatom3", 4, 0, adegreep, fatom3.min.4, (fatom3.extent.4 + fatom3.min.4) + -1))
 assert(0 <= fatom3.extent.4, halide_error_buffer_extents_negative("Output buffer fatom3", 4, fatom3.extent.4))
 assert((fatom3.min.5 <= 0) && (tdegree2 <= (fatom3.extent.5 + fatom3.min.5)), halide_error_access_out_of_bounds("Output buffer fatom3", 5, 0, tdegree2 + -1, fatom3.min.5, (fatom3.extent.5 + fatom3.min.5) + -1))
 assert(0 <= fatom3.extent.5, halide_error_buffer_extents_negative("Output buffer fatom3", 5, fatom3.extent.5))
 assert((interactions.min.0 <= 0) && (max(nelems, 1) <= (interactions.extent.0 + interactions.min.0)), halide_error_access_out_of_bounds("Input buffer interactions", 0, 0, max(nelems, 1) + -1, interactions.min.0, (interactions.extent.0 + interactions.min.0) + -1))
 assert(0 <= interactions.extent.0, halide_error_buffer_extents_negative("Input buffer interactions", 0, interactions.extent.0))
 assert((interactions.min.1 <= 0) && (max(nelems, 1) <= (interactions.extent.1 + interactions.min.1)), halide_error_access_out_of_bounds("Input buffer interactions", 1, 0, max(nelems, 1) + -1, interactions.min.1, (interactions.extent.1 + interactions.min.1) + -1))
 assert(0 <= interactions.extent.1, halide_error_buffer_extents_negative("Input buffer interactions", 1, interactions.extent.1))
 assert((pairlist.min.0 <= 0) && (npairs <= (pairlist.extent.0 + pairlist.min.0)), halide_error_access_out_of_bounds("Input buffer pairlist", 0, 0, npairs + -1, pairlist.min.0, (pairlist.extent.0 + pairlist.min.0) + -1))
 assert(0 <= pairlist.extent.0, halide_error_buffer_extents_negative("Input buffer pairlist", 0, pairlist.extent.0))
 assert((pairnumsum.min.0 <= 0) && ((natom + 1) <= (pairnumsum.extent.0 + pairnumsum.min.0)), halide_error_access_out_of_bounds("Input buffer pairnumsum", 0, 0, natom, pairnumsum.min.0, (pairnumsum.extent.0 + pairnumsum.min.0) + -1))
 assert(0 <= pairnumsum.extent.0, halide_error_buffer_extents_negative("Input buffer pairnumsum", 0, pairnumsum.extent.0))
 assert((y.min.0 <= 0) && (max(y.extent.0.required.s, 1) <= (y.extent.0 + y.min.0)), halide_error_access_out_of_bounds("Input buffer y", 0, 0, max(y.extent.0.required.s, 1) + -1, y.min.0, (y.extent.0 + y.min.0) + -1))
 assert(0 <= y.extent.0, halide_error_buffer_extents_negative("Input buffer y", 0, y.extent.0))
 assert((y.min.1 <= 0) && (3 <= (y.extent.1 + y.min.1)), halide_error_access_out_of_bounds("Input buffer y", 1, 0, 2, y.min.1, (y.extent.1 + y.min.1) + -1))
 assert(0 <= y.extent.1, halide_error_buffer_extents_negative("Input buffer y", 1, y.extent.1))
 assert(Phi1.stride.0 == 1, halide_error_constraint_violated("Phi1.stride.0", Phi1.stride.0, "1", 1))
 assert(Phi1.min.0 == 0, halide_error_constraint_violated("Phi1.min.0", Phi1.min.0, "0", 0))
 assert(Phi1.extent.0 == nbesselparams, halide_error_constraint_violated("Phi1.extent.0", Phi1.extent.0, "nbesselparams", nbesselparams))
 assert(Phi1.min.1 == 0, halide_error_constraint_violated("Phi1.min.1", Phi1.min.1, "0", 0))
 assert(Phi1.extent.1 == bdegree, halide_error_constraint_violated("Phi1.extent.1", Phi1.extent.1, "bdegree", bdegree))
 assert(Phi1.min.2 == 0, halide_error_constraint_violated("Phi1.min.2", Phi1.min.2, "0", 0))
 assert(Phi1.extent.2 == forceij_f.s2.basis function index.max.s, halide_error_constraint_violated("Phi1.extent.2", Phi1.extent.2, "max(tdegree1, tdegree2)", forceij_f.s2.basis function index.max.s))
 assert(Phi2.stride.0 == 1, halide_error_constraint_violated("Phi2.stride.0", Phi2.stride.0, "1", 1))
 assert(Phi2.min.0 == 0, halide_error_constraint_violated("Phi2.min.0", Phi2.min.0, "0", 0))
 assert(Phi2.extent.0 == adegree, halide_error_constraint_violated("Phi2.extent.0", Phi2.extent.0, "adegree", adegree))
 assert(Phi2.min.1 == 0, halide_error_constraint_violated("Phi2.min.1", Phi2.min.1, "0", 0))
 assert(Phi2.extent.1 == forceij_f.s2.basis function index.max.s, halide_error_constraint_violated("Phi2.extent.1", Phi2.extent.1, "max(tdegree1, tdegree2)", forceij_f.s2.basis function index.max.s))
 assert(alist.stride.0 == 1, halide_error_constraint_violated("alist.stride.0", alist.stride.0, "1", 1))
 assert(alist.min.0 == 0, halide_error_constraint_violated("alist.min.0", alist.min.0, "0", 0))
 assert(alist.extent.0 == (natom*nl), halide_error_constraint_violated("alist.extent.0", alist.extent.0, "(nl*natom)", natom*nl))
 assert(atomtype.stride.0 == 1, halide_error_constraint_violated("atomtype.stride.0", atomtype.stride.0, "1", 1))
 assert(atomtype.min.0 == 0, halide_error_constraint_violated("atomtype.min.0", atomtype.min.0, "0", 0))
 assert(atomtype.extent.0 == natom, halide_error_constraint_violated("atomtype.extent.0", atomtype.extent.0, "natom", natom))
 assert(besselparams.stride.0 == 1, halide_error_constraint_violated("besselparams.stride.0", besselparams.stride.0, "1", 1))
 assert(besselparams.min.0 == 0, halide_error_constraint_violated("besselparams.min.0", besselparams.min.0, "0", 0))
 assert(besselparams.extent.0 == nbesselparams, halide_error_constraint_violated("besselparams.extent.0", besselparams.extent.0, "nbesselparams", nbesselparams))
 assert(eatom1.stride.0 == 1, halide_error_constraint_violated("eatom1.stride.0", eatom1.stride.0, "1", 1))
 assert(eatom1.min.0 == 0, halide_error_constraint_violated("eatom1.min.0", eatom1.min.0, "0", 0))
 assert(eatom1.extent.0 == natom, halide_error_constraint_violated("eatom1.extent.0", eatom1.extent.0, "natom", natom))
 assert(eatom1.min.1 == 0, halide_error_constraint_violated("eatom1.min.1", eatom1.min.1, "0", 0))
 assert(eatom1.extent.1 == nelems, halide_error_constraint_violated("eatom1.extent.1", eatom1.extent.1, "nelems", nelems))
 assert(eatom2.stride.0 == 1, halide_error_constraint_violated("eatom2.stride.0", eatom2.stride.0, "1", 1))
 assert(eatom2.min.0 == 0, halide_error_constraint_violated("eatom2.min.0", eatom2.min.0, "0", 0))
 assert(eatom2.extent.0 == natom, halide_error_constraint_violated("eatom2.extent.0", eatom2.extent.0, "natom", natom))
 assert(eatom2.min.1 == 0, halide_error_constraint_violated("eatom2.min.1", eatom2.min.1, "0", 0))
 assert(eatom2.extent.1 == nelemsCombos, halide_error_constraint_violated("eatom2.extent.1", eatom2.extent.1, "nelemsCombos", nelemsCombos))
 assert(eatom2.min.2 == 0, halide_error_constraint_violated("eatom2.min.2", eatom2.min.2, "0", 0))
 assert(eatom2.extent.2 == tdegree1, halide_error_constraint_violated("eatom2.extent.2", eatom2.extent.2, "tdegree1", tdegree1))
 assert(eatom3.stride.0 == 1, halide_error_constraint_violated("eatom3.stride.0", eatom3.stride.0, "1", 1))
 assert(eatom3.min.0 == 0, halide_error_constraint_violated("eatom3.min.0", eatom3.min.0, "0", 0))
 assert(eatom3.extent.0 == natom, halide_error_constraint_violated("eatom3.extent.0", eatom3.extent.0, "natom", natom))
 assert(eatom3.min.1 == 0, halide_error_constraint_violated("eatom3.min.1", eatom3.min.1, "0", 0))
 assert(eatom3.extent.1 == nelemsCombos, halide_error_constraint_violated("eatom3.extent.1", eatom3.extent.1, "nelemsCombos", nelemsCombos))
 assert(eatom3.min.2 == 0, halide_error_constraint_violated("eatom3.min.2", eatom3.min.2, "0", 0))
 assert(eatom3.extent.2 == nelems, halide_error_constraint_violated("eatom3.extent.2", eatom3.extent.2, "nelems", nelems))
 assert(eatom3.min.3 == 0, halide_error_constraint_violated("eatom3.min.3", eatom3.min.3, "0", 0))
 assert(eatom3.extent.3 == (adegreep + 1), halide_error_constraint_violated("eatom3.extent.3", eatom3.extent.3, "(adegreep + 1)", adegreep + 1))
 assert(eatom3.min.4 == 0, halide_error_constraint_violated("eatom3.min.4", eatom3.min.4, "0", 0))
 assert(eatom3.extent.4 == tdegree2, halide_error_constraint_violated("eatom3.extent.4", eatom3.extent.4, "tdegree2", tdegree2))
 assert(fatom1.stride.0 == 1, halide_error_constraint_violated("fatom1.stride.0", fatom1.stride.0, "1", 1))
 assert(fatom1.min.0 == 0, halide_error_constraint_violated("fatom1.min.0", fatom1.min.0, "0", 0))
 assert(fatom1.extent.0 == natom, halide_error_constraint_violated("fatom1.extent.0", fatom1.extent.0, "natom", natom))
 assert(fatom1.min.1 == 0, halide_error_constraint_violated("fatom1.min.1", fatom1.min.1, "0", 0))
 assert(fatom1.extent.1 == nelems, halide_error_constraint_violated("fatom1.extent.1", fatom1.extent.1, "nelems", nelems))
 assert(fatom1.min.2 == 0, halide_error_constraint_violated("fatom1.min.2", fatom1.min.2, "0", 0))
 assert(fatom1.extent.2 == 3, halide_error_constraint_violated("fatom1.extent.2", fatom1.extent.2, "3", 3))
 assert(fatom2.stride.0 == 1, halide_error_constraint_violated("fatom2.stride.0", fatom2.stride.0, "1", 1))
 assert(fatom2.min.0 == 0, halide_error_constraint_violated("fatom2.min.0", fatom2.min.0, "0", 0))
 assert(fatom2.extent.0 == 3, halide_error_constraint_violated("fatom2.extent.0", fatom2.extent.0, "3", 3))
 assert(fatom2.min.1 == 0, halide_error_constraint_violated("fatom2.min.1", fatom2.min.1, "0", 0))
 assert(fatom2.extent.1 == natom, halide_error_constraint_violated("fatom2.extent.1", fatom2.extent.1, "natom", natom))
 assert(fatom2.min.2 == 0, halide_error_constraint_violated("fatom2.min.2", fatom2.min.2, "0", 0))
 assert(fatom2.extent.2 == nelemsCombos, halide_error_constraint_violated("fatom2.extent.2", fatom2.extent.2, "nelemsCombos", nelemsCombos))
 assert(fatom2.min.3 == 0, halide_error_constraint_violated("fatom2.min.3", fatom2.min.3, "0", 0))
 assert(fatom2.extent.3 == tdegree1, halide_error_constraint_violated("fatom2.extent.3", fatom2.extent.3, "tdegree1", tdegree1))
 assert(fatom3.stride.0 == 1, halide_error_constraint_violated("fatom3.stride.0", fatom3.stride.0, "1", 1))
 assert(fatom3.min.0 == 0, halide_error_constraint_violated("fatom3.min.0", fatom3.min.0, "0", 0))
 assert(fatom3.extent.0 == 3, halide_error_constraint_violated("fatom3.extent.0", fatom3.extent.0, "3", 3))
 assert(fatom3.min.1 == 0, halide_error_constraint_violated("fatom3.min.1", fatom3.min.1, "0", 0))
 assert(fatom3.extent.1 == natom, halide_error_constraint_violated("fatom3.extent.1", fatom3.extent.1, "natom", natom))
 assert(fatom3.min.2 == 0, halide_error_constraint_violated("fatom3.min.2", fatom3.min.2, "0", 0))
 assert(fatom3.extent.2 == nelemsCombos, halide_error_constraint_violated("fatom3.extent.2", fatom3.extent.2, "nelemsCombos", nelemsCombos))
 assert(fatom3.min.3 == 0, halide_error_constraint_violated("fatom3.min.3", fatom3.min.3, "0", 0))
 assert(fatom3.extent.3 == nelems, halide_error_constraint_violated("fatom3.extent.3", fatom3.extent.3, "nelems", nelems))
 assert(fatom3.min.4 == 0, halide_error_constraint_violated("fatom3.min.4", fatom3.min.4, "0", 0))
 assert(fatom3.extent.4 == (adegreep + 1), halide_error_constraint_violated("fatom3.extent.4", fatom3.extent.4, "(adegreep + 1)", adegreep + 1))
 assert(fatom3.min.5 == 0, halide_error_constraint_violated("fatom3.min.5", fatom3.min.5, "0", 0))
 assert(fatom3.extent.5 == tdegree2, halide_error_constraint_violated("fatom3.extent.5", fatom3.extent.5, "tdegree2", tdegree2))
 assert(interactions.stride.0 == 1, halide_error_constraint_violated("interactions.stride.0", interactions.stride.0, "1", 1))
 assert(interactions.min.0 == 0, halide_error_constraint_violated("interactions.min.0", interactions.min.0, "0", 0))
 assert(interactions.extent.0 == nelems, halide_error_constraint_violated("interactions.extent.0", interactions.extent.0, "nelems", nelems))
 assert(interactions.min.1 == 0, halide_error_constraint_violated("interactions.min.1", interactions.min.1, "0", 0))
 assert(interactions.extent.1 == nelems, halide_error_constraint_violated("interactions.extent.1", interactions.extent.1, "nelems", nelems))
 assert(pairlist.stride.0 == 1, halide_error_constraint_violated("pairlist.stride.0", pairlist.stride.0, "1", 1))
 assert(pairlist.min.0 == 0, halide_error_constraint_violated("pairlist.min.0", pairlist.min.0, "0", 0))
 assert(pairlist.extent.0 == npairs, halide_error_constraint_violated("pairlist.extent.0", pairlist.extent.0, "npairs", npairs))
 assert(pairnumsum.stride.0 == 1, halide_error_constraint_violated("pairnumsum.stride.0", pairnumsum.stride.0, "1", 1))
 assert(pairnumsum.min.0 == 0, halide_error_constraint_violated("pairnumsum.min.0", pairnumsum.min.0, "0", 0))
 assert(pairnumsum.extent.0 == (natom + 1), halide_error_constraint_violated("pairnumsum.extent.0", pairnumsum.extent.0, "(natom + 1)", natom + 1))
 assert(y.stride.0 == 1, halide_error_constraint_violated("y.stride.0", y.stride.0, "1", 1))
 assert(y.min.0 == 0, halide_error_constraint_violated("y.min.0", y.min.0, "0", 0))
 assert(y.extent.0 == (natom*nl), halide_error_constraint_violated("y.extent.0", y.extent.0, "(nl*natom)", natom*nl))
 assert(y.min.1 == 0, halide_error_constraint_violated("y.min.1", y.min.1, "0", 0))
 assert(y.extent.1 == 3, halide_error_constraint_violated("y.extent.1", y.extent.1, "3", 3))
 let Phi1.total_extent.1 = int64(bdegree)*int64(nbesselparams)
 let Phi1.total_extent.2 = Phi1.total_extent.1*int64(forceij_f.s2.basis function index.max.s)
 let Phi2.total_extent.1 = int64(forceij_f.s2.basis function index.max.s)*int64(adegree)
 let eatom1.total_extent.1 = int64(nelems)*int64(natom)
 let eatom2.total_extent.1 = int64(nelemsCombos)*int64(natom)
 let eatom2.total_extent.2 = eatom2.total_extent.1*int64(tdegree1)
 let eatom3.total_extent.2 = eatom2.total_extent.1*int64(nelems)
 let eatom3.total_extent.3 = eatom3.total_extent.2*int64(eatom3.extent.3)
 let eatom3.total_extent.4 = eatom3.total_extent.3*int64(tdegree2)
 let fatom2.total_extent.2.s = int64(natom)*int64(nelemsCombos)
 let fatom2.total_extent.3.s = fatom2.total_extent.2.s*int64(tdegree1)
 let fatom3.total_extent.3.s = fatom2.total_extent.2.s*int64(nelems)
 let fatom3.total_extent.4.s = fatom3.total_extent.3.s*int64(fatom3.extent.4)
 let fatom3.total_extent.5.s = fatom3.total_extent.4.s*int64(tdegree2)
 let interactions.total_extent.1 = int64(nelems)*int64(nelems)
 assert((uint64)abs(int64(nbesselparams)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi1", (uint64)abs(int64(nbesselparams)), (uint64)2147483647))
 assert((uint64)abs(int64(bdegree)*int64(Phi1.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi1", (uint64)abs(int64(bdegree)*int64(Phi1.stride.1)), (uint64)2147483647))
 assert(Phi1.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("Phi1", Phi1.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(forceij_f.s2.basis function index.max.s)*int64(Phi1.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi1", (uint64)abs(int64(forceij_f.s2.basis function index.max.s)*int64(Phi1.stride.2)), (uint64)2147483647))
 assert(Phi1.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("Phi1", Phi1.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(adegree)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi2", (uint64)abs(int64(adegree)), (uint64)2147483647))
 assert((uint64)abs(int64(forceij_f.s2.basis function index.max.s)*int64(Phi2.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("Phi2", (uint64)abs(int64(forceij_f.s2.basis function index.max.s)*int64(Phi2.stride.1)), (uint64)2147483647))
 assert(Phi2.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("Phi2", Phi2.total_extent.1, (int64)2147483647))
 assert(uint64(alist.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("alist", uint64(alist.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(natom)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("atomtype", (uint64)abs(int64(natom)), (uint64)2147483647))
 assert((uint64)abs(int64(nbesselparams)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("besselparams", (uint64)abs(int64(nbesselparams)), (uint64)2147483647))
 assert((uint64)abs(int64(natom)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom1", (uint64)abs(int64(natom)), (uint64)2147483647))
 assert((uint64)abs(int64(nelems)*int64(eatom1.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom1", (uint64)abs(int64(nelems)*int64(eatom1.stride.1)), (uint64)2147483647))
 assert(eatom1.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("eatom1", eatom1.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(natom)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom2", (uint64)abs(int64(natom)), (uint64)2147483647))
 assert((uint64)abs(int64(nelemsCombos)*int64(eatom2.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom2", (uint64)abs(int64(nelemsCombos)*int64(eatom2.stride.1)), (uint64)2147483647))
 assert(eatom2.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("eatom2", eatom2.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(tdegree1)*int64(eatom2.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom2", (uint64)abs(int64(tdegree1)*int64(eatom2.stride.2)), (uint64)2147483647))
 assert(eatom2.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("eatom2", eatom2.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(natom)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom3", (uint64)abs(int64(natom)), (uint64)2147483647))
 assert((uint64)abs(int64(nelemsCombos)*int64(eatom3.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom3", (uint64)abs(int64(nelemsCombos)*int64(eatom3.stride.1)), (uint64)2147483647))
 assert((uint64)abs(int64(nelems)*int64(eatom3.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom3", (uint64)abs(int64(nelems)*int64(eatom3.stride.2)), (uint64)2147483647))
 assert(eatom3.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("eatom3", eatom3.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(eatom3.extent.3)*int64(eatom3.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom3", (uint64)abs(int64(eatom3.extent.3)*int64(eatom3.stride.3)), (uint64)2147483647))
 assert(eatom3.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("eatom3", eatom3.total_extent.3, (int64)2147483647))
 assert((uint64)abs(int64(tdegree2)*int64(eatom3.stride.4)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("eatom3", (uint64)abs(int64(tdegree2)*int64(eatom3.stride.4)), (uint64)2147483647))
 assert(eatom3.total_extent.4 <= (int64)2147483647, halide_error_buffer_extents_too_large("eatom3", eatom3.total_extent.4, (int64)2147483647))
 assert((uint64)abs(int64(nelems)*int64(fatom1.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom1", (uint64)abs(int64(nelems)*int64(fatom1.stride.1)), (uint64)2147483647))
 assert((uint64)abs(int64(fatom1.stride.2)*(int64)3) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom1", (uint64)abs(int64(fatom1.stride.2)*(int64)3), (uint64)2147483647))
 assert(eatom1.total_extent.1 <= (int64)715827882, halide_error_buffer_extents_too_large("fatom1", eatom1.total_extent.1*(int64)3, (int64)2147483647))
 assert((uint64)abs(int64(natom)*int64(fatom2.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom2", (uint64)abs(int64(natom)*int64(fatom2.stride.1)), (uint64)2147483647))
 assert(int64(natom) <= (int64)715827882, halide_error_buffer_extents_too_large("fatom2", int64(natom)*(int64)3, (int64)2147483647))
 assert((uint64)abs(int64(nelemsCombos)*int64(fatom2.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom2", (uint64)abs(int64(nelemsCombos)*int64(fatom2.stride.2)), (uint64)2147483647))
 assert(fatom2.total_extent.2.s <= (int64)715827882, halide_error_buffer_extents_too_large("fatom2", fatom2.total_extent.2.s*(int64)3, (int64)2147483647))
 assert((uint64)abs(int64(tdegree1)*int64(fatom2.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom2", (uint64)abs(int64(tdegree1)*int64(fatom2.stride.3)), (uint64)2147483647))
 assert(fatom2.total_extent.3.s <= (int64)715827882, halide_error_buffer_extents_too_large("fatom2", fatom2.total_extent.3.s*(int64)3, (int64)2147483647))
 assert((uint64)abs(int64(natom)*int64(fatom3.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom3", (uint64)abs(int64(natom)*int64(fatom3.stride.1)), (uint64)2147483647))
 assert((uint64)abs(int64(nelemsCombos)*int64(fatom3.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom3", (uint64)abs(int64(nelemsCombos)*int64(fatom3.stride.2)), (uint64)2147483647))
 assert((uint64)abs(int64(nelems)*int64(fatom3.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom3", (uint64)abs(int64(nelems)*int64(fatom3.stride.3)), (uint64)2147483647))
 assert(fatom3.total_extent.3.s <= (int64)715827882, halide_error_buffer_extents_too_large("fatom3", fatom3.total_extent.3.s*(int64)3, (int64)2147483647))
 assert((uint64)abs(int64(fatom3.extent.4)*int64(fatom3.stride.4)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom3", (uint64)abs(int64(fatom3.extent.4)*int64(fatom3.stride.4)), (uint64)2147483647))
 assert(fatom3.total_extent.4.s <= (int64)715827882, halide_error_buffer_extents_too_large("fatom3", fatom3.total_extent.4.s*(int64)3, (int64)2147483647))
 assert((uint64)abs(int64(tdegree2)*int64(fatom3.stride.5)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("fatom3", (uint64)abs(int64(tdegree2)*int64(fatom3.stride.5)), (uint64)2147483647))
 assert(fatom3.total_extent.5.s <= (int64)715827882, halide_error_buffer_extents_too_large("fatom3", fatom3.total_extent.5.s*(int64)3, (int64)2147483647))
 assert((uint64)abs(int64(nelems)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("interactions", (uint64)abs(int64(nelems)), (uint64)2147483647))
 assert((uint64)abs(int64(nelems)*int64(interactions.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("interactions", (uint64)abs(int64(nelems)*int64(interactions.stride.1)), (uint64)2147483647))
 assert(interactions.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("interactions", interactions.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(npairs)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pairlist", (uint64)abs(int64(npairs)), (uint64)2147483647))
 assert(uint64(pairnumsum.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pairnumsum", uint64(pairnumsum.extent.0), (uint64)2147483647))
 assert(uint64(y.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("y", uint64(y.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(y.stride.1)*(int64)3) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("y", (uint64)abs(int64(y.stride.1)*(int64)3), (uint64)2147483647))
 assert(int64(y.extent.0) <= (int64)715827882, halide_error_buffer_extents_too_large("y", int64(y.extent.0)*(int64)3, (int64)2147483647))
 assert(!Phi1.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer Phi1"))
 assert(!Phi2.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer Phi2"))
 assert(!alist.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer alist"))
 assert(!atomtype.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer atomtype"))
 assert(!besselparams.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer besselparams"))
 assert(!eatom1.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer eatom1"))
 assert(!eatom2.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer eatom2"))
 assert(!eatom3.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer eatom3"))
 assert(!fatom1.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer fatom1"))
 assert(!fatom2.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer fatom2"))
 assert(!fatom3.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer fatom3"))
 assert(!interactions.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer interactions"))
 assert(!pairlist.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pairlist"))
 assert(!pairnumsum.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pairnumsum"))
 assert(!y.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer y"))
 assert(Phi1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer Phi1"))
 assert(Phi2 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer Phi2"))
 assert(alist != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer alist"))
 assert(atomtype != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer atomtype"))
 assert(besselparams != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer besselparams"))
 assert(eatom1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer eatom1"))
 assert(eatom2 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer eatom2"))
 assert(eatom3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer eatom3"))
 assert(fatom1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer fatom1"))
 assert(fatom2 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer fatom2"))
 assert(fatom3 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer fatom3"))
 assert(interactions != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer interactions"))
 assert(pairlist != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pairlist"))
 assert(pairnumsum != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pairnumsum"))
 assert(y != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer y"))
 produce eatom1 {
  for (eatom1.s0.oy, 0, nelems) {
   let t3941 = eatom1.s0.oy*eatom1.stride.1
   for (eatom1.s0.ox, 0, natom) {
    eatom1[eatom1.s0.ox + t3941] = select(atomtype[eatom1.s0.ox] == (eatom1.s0.oy + 1), 1.000000, 0.000000)
   }
  }
 }
 produce fatom1 {
  for (fatom1.s0.oz, 0, 3) {
   let t3942 = fatom1.s0.oz*fatom1.stride.2
   for (fatom1.s0.oy, 0, nelems) {
    let t3943 = (fatom1.s0.oy*fatom1.stride.1) + t3942
    for (fatom1.s0.ox, 0, natom) {
     fatom1[fatom1.s0.ox + t3943] = 0.000000
    }
   }
  }
 }
 allocate rijs_f[float64 * npairs * 3]
 produce rijs_f {
  for (rijs_f.s0.dim, 0, 3) {
   for (rijs_f.s0.pairindex, 0, npairs) {
    rijs_f[(rijs_f.s0.pairindex*3) + rijs_f.s0.dim] = 0.000000
   }
  }
  let t3944 = natom*nl
  for (rijs_f.s1.r22$x, 0, natom) {
   let rijs_f.s1.r22$y.new_min.s = min(pairnumsum[rijs_f.s1.r22$x], npairs)
   let rijs_f.s1.r22$y.new_max.s = max(min(pairnumsum[rijs_f.s1.r22$x + 1], npairs), rijs_f.s1.r22$y.new_min.s)
   let t3947 = max(rijs_f.s1.r22$y.new_min.s, 0)
   let t3945 = max(rijs_f.s1.r22$y.new_max.s, 0) - t3947
   for (rijs_f.s1.r22$y.rebased, 0, t3945) {
    let t3948 = rijs_f.s1.r22$y.rebased + t3947
    for (rijs_f.s1.dim, 0, 3) {
     let t3862 = rijs_f.s1.dim*y.stride.1
     rijs_f[(t3948*3) + rijs_f.s1.dim] = y[max(min(pairlist[t3948], t3944 + -1), 0) + t3862] - y[rijs_f.s1.r22$x + t3862]
    }
   }
  }
 }
 allocate abf_f[float64 * adegree * npairs]
 produce abf_f {
  consume rijs_f {
   let t3950 = (float64)exp_f64(-1.000000)
   let t3949 = (float64)rcut - (float64)rin
   for (abf_f.s0.pairindex, 0, npairs) {
    let t3952 = abf_f.s0.pairindex*adegree
    let t3951 = abf_f.s0.pairindex*3
    for (abf_f.s0.basis function index, 0, adegree) {
     let t3695 = rijs_f[t3951 + 2]
     let t3696 = rijs_f[t3951]
     let t3697 = rijs_f[t3951 + 1]
     let t3698 = (float64)sqrt_f64((t3695*t3695) + ((t3696*t3696) + (t3697*t3697)))
     let t3699 = (t3698 - (float64)rin)/t3949
     let t3863 = (t3699*t3699)*t3699
     abf_f[abf_f.s0.basis function index + t3952] = ((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t3863)*(1.000000 - t3863)) + 0.000001))/t3950)/(float64)pow_f64(t3698, float64(abf_f.s0.basis function index) + 1.000000)
    }
   }
  }
 }
 allocate rbf_f[float64 * nbesselparams * bdegree * npairs]
 produce rbf_f {
  consume rijs_f {
   let t3954 = (float64)exp_f64(-1.000000)
   let t3953 = (float64)rcut - (float64)rin
   for (rbf_f.s0.pairindex, 0, npairs) {
    let t3957 = (float64)sqrt_f64(2.000000/t3953)
    let t3958 = (bdegree*nbesselparams)*rbf_f.s0.pairindex
    let t3956 = rbf_f.s0.pairindex*3
    for (rbf_f.s0.basis function index, 0, bdegree) {
     let t3959 = t3957/float64((rbf_f.s0.basis function index + 1))
     let t3960 = (nbesselparams*rbf_f.s0.basis function index) + t3958
     for (rbf_f.s0.basis function param, 0, nbesselparams) {
      let t3701.s = besselparams[rbf_f.s0.basis function param]
      let t3702 = rijs_f[t3956 + 2]
      let t3703 = rijs_f[t3956]
      let t3704 = rijs_f[t3956 + 1]
      let t3705.s = (float64)sqrt_f64((t3702*t3702) + ((t3703*t3703) + (t3704*t3704)))
      let t3707 = (t3705.s - (float64)rin)/t3953
      let t3864 = max(t3701.s, 0.001000)
      let t3865 = t3705.s - (float64)rin
      let t3867 = (t3707*t3707)*t3707
      rbf_f[rbf_f.s0.basis function param + t3960] = ((float64)sin_f64((((1.000000 - (float64)exp_f64((0.000000 - (t3864*t3865))/t3953))/(1.000000 - (float64)exp_f64(0.000000 - t3864)))*float64((rbf_f.s0.basis function index + 1)))*3.141593)*(((float64)exp_f64(-1.000000/(float64)sqrt_f64(((1.000000 - t3867)*(1.000000 - t3867)) + 0.000001))/t3954)*t3959))/t3865
     }
    }
   }
  }
 }
 assert(max(max(forceij_f.s2.basis function index.max.s, tdegree1), tdegree2) <= forceij_f.s2.basis function index.max.s, halide_error_explicit_bounds_too_small("basis function index", "energyij_f", 0, forceij_f.s2.basis function index.max.s + -1, 0, max(max(forceij_f.s2.basis function index.max.s, tdegree1), tdegree2) + -1))
 allocate energyij_f[float64 * forceij_f.s2.basis function index.max.s * npairs]
 produce energyij_f {
  for (energyij_f.s0.pairindex, 0, npairs) {
   let t3961 = energyij_f.s0.pairindex*forceij_f.s2.basis function index.max.s
   for (energyij_f.s0.basis function index, 0, forceij_f.s2.basis function index.max.s) {
    energyij_f[energyij_f.s0.basis function index + t3961] = 0.000000
   }
  }
  consume rbf_f {
   for (energyij_f.s1.pairindex, 0, npairs) {
    let t3964 = (bdegree*nbesselparams)*energyij_f.s1.pairindex
    let t3963 = energyij_f.s1.pairindex*forceij_f.s2.basis function index.max.s
    for (energyij_f.s1.basis function index, 0, forceij_f.s2.basis function index.max.s) {
     let t3966 = Phi1.stride.2*energyij_f.s1.basis function index
     let t3965 = energyij_f.s1.basis function index + t3963
     for (energyij_f.s1.r48$y, 0, nbesselparams) {
      let t3968 = (Phi1.stride.1*energyij_f.s1.r48$y) + t3966
      let t3967 = energyij_f.s1.r48$y + t3964
      for (energyij_f.s1.r48$x, 0, bdegree) {
       energyij_f[t3965] = energyij_f[t3965] + (rbf_f[(energyij_f.s1.r48$x*nbesselparams) + t3967]*Phi1[energyij_f.s1.r48$x + t3968])
      }
     }
    }
   }
  }
  free rbf_f
  consume abf_f {
   for (energyij_f.s2.pairindex, 0, npairs) {
    let t3969 = energyij_f.s2.pairindex*forceij_f.s2.basis function index.max.s
    let t3970 = adegree*energyij_f.s2.pairindex
    for (energyij_f.s2.basis function index, 0, forceij_f.s2.basis function index.max.s) {
     let t3972 = Phi2.stride.1*energyij_f.s2.basis function index
     let t3971 = energyij_f.s2.basis function index + t3969
     for (energyij_f.s2.r58$x, 0, adegree) {
      energyij_f[t3971] = energyij_f[t3971] + (abf_f[energyij_f.s2.r58$x + t3970]*Phi2[energyij_f.s2.r58$x + t3972])
     }
    }
   }
  }
  free abf_f
 }
 allocate ijs_f[int32 * npairs * 4]
 produce ijs_f {
  for (ijs_f.s0.numOuts, 0, 4) {
   let t3973 = mux(ijs_f.s0.numOuts, -1, -1, -1, -1)
   let t3974 = ijs_f.s0.numOuts*npairs
   for (ijs_f.s0.pairindex, 0, npairs) {
    ijs_f[ijs_f.s0.pairindex + t3974] = t3973
   }
  }
  let t3975 = natom*nl
  for (ijs_f.s1.r22$x, 0, natom) {
   let ijs_f.s1.r22$y.new_min.s = min(pairnumsum[ijs_f.s1.r22$x], npairs)
   let ijs_f.s1.r22$y.new_max.s = max(min(pairnumsum[ijs_f.s1.r22$x + 1], npairs), ijs_f.s1.r22$y.new_min.s)
   let t3978 = max(ijs_f.s1.r22$y.new_min.s, 0)
   let t3976 = max(ijs_f.s1.r22$y.new_max.s, 0) - t3978
   for (ijs_f.s1.r22$y.rebased, 0, t3976) {
    let t3979 = ijs_f.s1.r22$y.rebased + t3978
    for (ijs_f.s1.numOuts, 0, 4) {
     let t3711.s = min(alist[max(min(pairlist[t3979], t3975 + -1), 0)], natom + -1)
     let t3870 = max(t3711.s, 0)
     ijs_f[(ijs_f.s1.numOuts*npairs) + t3979] = mux(ijs_f.s1.numOuts, ijs_f.s1.r22$x, t3870, atomtype[ijs_f.s1.r22$x], atomtype[t3870])
    }
   }
  }
 }
 assert(1 <= nelemsCombos, halide_error_explicit_bounds_too_small("inter", "eatom2_f", 0, nelemsCombos + -1, 0, 0))
 assert(1 <= natom, halide_error_explicit_bounds_too_small("atom", "eatom2_f", 0, natom + -1, 0, 0))
 allocate eatom2_f[float64 * natom * nelemsCombos * tdegree1]
 produce eatom2_f {
  for (eatom2_f.s0.basis function index, 0, tdegree1) {
   let t3981 = (natom*nelemsCombos)*eatom2_f.s0.basis function index
   for (eatom2_f.s0.inter, 0, nelemsCombos) {
    let t3982 = (eatom2_f.s0.inter*natom) + t3981
    for (eatom2_f.s0.atom, 0, natom) {
     eatom2_f[eatom2_f.s0.atom + t3982] = 0.000000
    }
   }
  }
  consume ijs_f {
   consume energyij_f {
    for (eatom2_f.s1.r80$y, 0, tdegree1) {
     let t3986 = (natom*nelemsCombos)*eatom2_f.s1.r80$y
     for (eatom2_f.s1.r80$x, 0, npairs) {
      let t3712.s = (max(min(interactions[((max(min(ijs_f[(npairs*3) + eatom2_f.s1.r80$x], nelems), 1)*interactions.stride.1) + (max(min(ijs_f[(npairs*2) + eatom2_f.s1.r80$x], nelems), 1) - interactions.stride.1)) + -1], nelemsCombos), 1)*natom) + (max(min(ijs_f[eatom2_f.s1.r80$x], natom + -1), 0) + t3986)
      let t3871 = t3712.s - natom
      eatom2_f[t3871] = eatom2_f[t3871] + energyij_f[(eatom2_f.s1.r80$x*forceij_f.s2.basis function index.max.s) + eatom2_f.s1.r80$y]
     }
    }
   }
  }
 }
 produce eatom2 {
  consume eatom2_f {
   for (eatom2.s0.oz, 0, tdegree1) {
    let t3990 = (natom*nelemsCombos)*eatom2.s0.oz
    let t3991 = eatom2.s0.oz*eatom2.stride.2
    for (eatom2.s0.oy, 0, nelemsCombos) {
     let t3992 = (eatom2.s0.oy*natom) + t3990
     let t3993 = (eatom2.s0.oy*eatom2.stride.1) + t3991
     for (eatom2.s0.ox, 0, natom) {
      eatom2[eatom2.s0.ox + t3993] = eatom2_f[eatom2.s0.ox + t3992]
     }
    }
   }
  }
 }
 free eatom2_f
 allocate dabf_f[float64 * adegree * npairs * 3]
 produce dabf_f {
  consume rijs_f {
   let t3994 = (float64)exp_f64(-1.000000)
   let t3995 = (float64)rcut - (float64)rin
   for (dabf_f.s0.dim, 0, 3) {
    let t3997 = 3.000000/(t3994*t3995)
    let t3998 = (adegree*npairs)*dabf_f.s0.dim
    for (dabf_f.s0.pairindex, 0, npairs) {
     let t4002 = dabf_f.s0.pairindex*3
     let t4000 = dabf_f.s0.dim + t4002
     let t4001 = (adegree*dabf_f.s0.pairindex) + t3998
     for (dabf_f.s0.basis function index, 0, adegree) {
      let t3713 = rijs_f[t4002 + 2]
      let t3714 = rijs_f[t4002]
      let t3715 = rijs_f[t4002 + 1]
      let t3716 = (float64)sqrt_f64((t3713*t3713) + ((t3714*t3714) + (t3715*t3715)))
      let t3719 = (t3716 - (float64)rin)/t3995
      let t3722 = let t4305 = ((t3719*t3719)*t3719) in ((1.000000 - t4305)*(1.000000 - t4305))
      let t3723 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t3722 + 0.000001))
      let t3724 = (float64)pow_f64(t3716, float64((dabf_f.s0.basis function index + 1)))
      let t3873 = t3719*t3719
      dabf_f[dabf_f.s0.basis function index + t4001] = (rijs_f[t4000]/t3716)*((((((t3873*t3997)*t3723)*((t3719*t3873) + -1.000000))/(float64)pow_f64(t3722 + 0.000001, 1.500000))/t3724) - (((t3723/t3994)*(float64(dabf_f.s0.basis function index) + 1.000000))/(t3716*t3724)))
     }
    }
   }
  }
 }
 allocate drbf_f[float64 * nbesselparams * bdegree * npairs * 3]
 produce drbf_f {
  consume rijs_f {
   let t4004 = (float64)exp_f64(-1.000000)
   let t4003 = (float64)rcut - (float64)rin
   for (drbf_f.s0.dim, 0, 3) {
    let t4010 = bdegree*nbesselparams
    let t4006 = (float64)sqrt_f64(2.000000/t4003)
    let t4007 = 3.000000/(t4003*t4004)
    let t4008 = (npairs*t4010)*drbf_f.s0.dim
    for (drbf_f.s0.pairindex, 0, npairs) {
     let t4014 = drbf_f.s0.pairindex*3
     let t4013 = (drbf_f.s0.pairindex*t4010) + t4008
     let t4012 = drbf_f.s0.dim + t4014
     for (drbf_f.s0.basis function index, 0, bdegree) {
      let t4015 = t4006/float64((drbf_f.s0.basis function index + 1))
      let t4016 = (drbf_f.s0.basis function index*nbesselparams) + t4013
      for (drbf_f.s0.basis function param, 0, nbesselparams) {
       let t3725 = rijs_f[t4014 + 2]
       let t3726 = rijs_f[t4014]
       let t3727 = rijs_f[t4014 + 1]
       let t3728 = (float64)sqrt_f64((t3725*t3725) + ((t3726*t3726) + (t3727*t3727)))
       let t3730.s = besselparams[drbf_f.s0.basis function param]
       let t3732 = max(t3730.s, 0.001000)*(t3728 - (float64)rin)
       let t3733 = (float64)exp_f64(0.000000 - max(t3730.s, 0.001000))
       let t3734 = ((1.000000 - (float64)exp_f64((0.000000 - t3732)/t4003))/(1.000000 - t3733))*float64((drbf_f.s0.basis function index + 1))
       let t3735 = (t3728 - (float64)rin)/t4003
       let t3738 = let t4306 = ((t3735*t3735)*t3735) in ((1.000000 - t4306)*(1.000000 - t4306))
       let t3739 = (float64)exp_f64(-1.000000/(float64)sqrt_f64(t3738 + 0.000001))
       let t3741 = t3739/t4004
       let t3742 = (float64)sin_f64(t3734*3.141593)
       let t3876 = t3728 - (float64)rin
       let t3877 = t3735*t3735
       drbf_f[drbf_f.s0.basis function param + t4016] = (rijs_f[t4012]/t3728)*((((((((float64)exp_f64(0.000000 - (t3732/t4003))*(max(t3730.s, 0.001000)/t4003))/(1.000000 - t3733))*(((float64)cos_f64(t3734*3.141593)*float64((drbf_f.s0.basis function index + 1)))*t3741))*3.141593)/t3876) + (((((((t3877*t4007)*t3739)*((t3735*t3877) + -1.000000))/(float64)pow_f64(t3738 + 0.000001, 1.500000))*t3742)/t3876) - ((t3741*t3742)/(t3876*t3876))))*t4015)
      }
     }
    }
   }
  }
 }
 free rijs_f
 allocate forceij_f[float64 * forceij_f.s2.basis function index.max.s * npairs * 3]
 produce forceij_f {
  for (forceij_f.s0.dim, 0, 3) {
   let t4018 = (forceij_f.s2.basis function index.max.s*npairs)*forceij_f.s0.dim
   for (forceij_f.s0.pairindex, 0, npairs) {
    let t4019 = (forceij_f.s0.pairindex*forceij_f.s2.basis function index.max.s) + t4018
    for (forceij_f.s0.basis function index, 0, forceij_f.s2.basis function index.max.s) {
     forceij_f[forceij_f.s0.basis function index + t4019] = 0.000000
    }
   }
  }
  consume drbf_f {
   for (forceij_f.s1.dim, 0, 3) {
    let t4025 = bdegree*nbesselparams
    let t4023 = (npairs*t4025)*forceij_f.s1.dim
    let t4022 = (forceij_f.s2.basis function index.max.s*npairs)*forceij_f.s1.dim
    for (forceij_f.s1.pairindex, 0, npairs) {
     let t4027 = (forceij_f.s1.pairindex*t4025) + t4023
     let t4026 = (forceij_f.s1.pairindex*forceij_f.s2.basis function index.max.s) + t4022
     for (forceij_f.s1.basis function index, 0, forceij_f.s2.basis function index.max.s) {
      let t4029 = Phi1.stride.2*forceij_f.s1.basis function index
      let t4028 = forceij_f.s1.basis function index + t4026
      for (forceij_f.s1.r48$y, 0, nbesselparams) {
       let t4031 = (Phi1.stride.1*forceij_f.s1.r48$y) + t4029
       let t4030 = forceij_f.s1.r48$y + t4027
       for (forceij_f.s1.r48$x, 0, bdegree) {
        forceij_f[t4028] = forceij_f[t4028] + (drbf_f[(forceij_f.s1.r48$x*nbesselparams) + t4030]*Phi1[forceij_f.s1.r48$x + t4031])
       }
      }
     }
    }
   }
  }
  free drbf_f
  consume dabf_f {
   for (forceij_f.s2.dim, 0, 3) {
    let t4034 = (forceij_f.s2.basis function index.max.s*npairs)*forceij_f.s2.dim
    let t4035 = (adegree*npairs)*forceij_f.s2.dim
    for (forceij_f.s2.pairindex, 0, npairs) {
     let t4036 = (forceij_f.s2.basis function index.max.s*forceij_f.s2.pairindex) + t4034
     let t4037 = (adegree*forceij_f.s2.pairindex) + t4035
     for (forceij_f.s2.basis function index, 0, forceij_f.s2.basis function index.max.s) {
      let t4039 = Phi2.stride.1*forceij_f.s2.basis function index
      let t4038 = forceij_f.s2.basis function index + t4036
      for (forceij_f.s2.r58$x, 0, adegree) {
       forceij_f[t4038] = forceij_f[t4038] + (dabf_f[forceij_f.s2.r58$x + t4037]*Phi2[forceij_f.s2.r58$x + t4039])
      }
     }
    }
   }
  }
  free dabf_f
 }
 allocate fatom2_f[float64 * 3 * natom * nelemsCombos * tdegree1]
 produce fatom2_f {
  for (fatom2_f.s0.basis function index, 0, tdegree1) {
   let t4041 = ((natom*nelemsCombos)*fatom2_f.s0.basis function index)*3
   for (fatom2_f.s0.inter, 0, nelemsCombos) {
    let t4042 = ((fatom2_f.s0.inter*natom)*3) + t4041
    for (fatom2_f.s0.atom, 0, natom) {
     let t4043 = (fatom2_f.s0.atom*3) + t4042
     for (fatom2_f.s0.dim, 0, 3) {
      fatom2_f[fatom2_f.s0.dim + t4043] = 0.000000
     }
    }
   }
  }
  consume forceij_f {
   consume ijs_f {
    for (fatom2_f.s1.dim, 0, 3) {
     let t4053 = (forceij_f.s2.basis function index.max.s*npairs)*fatom2_f.s1.dim
     let t4049 = (natom*-3) + fatom2_f.s1.dim
     for (fatom2_f.s1.r80$y, 0, tdegree1) {
      let t4054 = (((natom*nelemsCombos)*fatom2_f.s1.r80$y)*3) + t4049
      let t4057 = fatom2_f.s1.r80$y + t4053
      for (fatom2_f.s1.r80$x, 0, npairs) {
       let t3747 = (max(min(ijs_f[fatom2_f.s1.r80$x], natom + -1), 0)*3) + (((max(min(interactions[((max(min(ijs_f[(npairs*3) + fatom2_f.s1.r80$x], nelems), 1)*interactions.stride.1) + (max(min(ijs_f[(npairs*2) + fatom2_f.s1.r80$x], nelems), 1) - interactions.stride.1)) + -1], nelemsCombos), 1)*natom)*3) + t4054)
       fatom2_f[t3747] = fatom2_f[t3747] + forceij_f[(fatom2_f.s1.r80$x*forceij_f.s2.basis function index.max.s) + t4057]
      }
     }
    }
   }
  }
  consume forceij_f {
   consume ijs_f {
    for (fatom2_f.s2.dim, 0, 3) {
     let t4067 = (forceij_f.s2.basis function index.max.s*npairs)*fatom2_f.s2.dim
     let t4063 = (natom*-3) + fatom2_f.s2.dim
     for (fatom2_f.s2.r80$y, 0, tdegree1) {
      let t4068 = (((natom*nelemsCombos)*fatom2_f.s2.r80$y)*3) + t4063
      let t4071 = fatom2_f.s2.r80$y + t4067
      for (fatom2_f.s2.r80$x, 0, npairs) {
       let t3748 = (max(min(ijs_f[fatom2_f.s2.r80$x + npairs], natom + -1), 0)*3) + (((max(min(interactions[((max(min(ijs_f[(npairs*3) + fatom2_f.s2.r80$x], nelems), 1)*interactions.stride.1) + (max(min(ijs_f[(npairs*2) + fatom2_f.s2.r80$x], nelems), 1) - interactions.stride.1)) + -1], nelemsCombos), 1)*natom)*3) + t4068)
       fatom2_f[t3748] = fatom2_f[t3748] - forceij_f[(fatom2_f.s2.r80$x*forceij_f.s2.basis function index.max.s) + t4071]
      }
     }
    }
   }
  }
  free ijs_f
 }
 produce fatom2 {
  consume fatom2_f {
   for (fatom2.s0.ozz, 0, tdegree1) {
    let t4073 = ((natom*nelemsCombos)*fatom2.s0.ozz)*3
    let t4074 = fatom2.s0.ozz*fatom2.stride.3
    for (fatom2.s0.oz, 0, nelemsCombos) {
     let t4075 = ((fatom2.s0.oz*natom)*3) + t4073
     let t4076 = (fatom2.s0.oz*fatom2.stride.2) + t4074
     for (fatom2.s0.oy, 0, natom) {
      let t4078 = (fatom2.s0.oy*fatom2.stride.1) + t4076
      let t4077 = (fatom2.s0.oy*3) + t4075
      for (fatom2.s0.ox, 0, 3) {
       fatom2[fatom2.s0.ox + t4078] = fatom2_f[fatom2.s0.ox + t4077]
      }
     }
    }
   }
  }
 }
 free fatom2_f
 assert(1 <= nelems, halide_error_explicit_bounds_too_small("type", "eatom3_f", 0, nelems + -1, 0, 0))
 allocate eatom3_f[float64 * natom * nelemsCombos * nelems * tdegree2 * (adegreep + 1)]
 produce eatom3_f {
  for (eatom3_f.s0.inverse basis function index, 0, adegreep + 1) {
   let t4082 = natom*nelemsCombos
   for (eatom3_f.s0.rbf_v, 0, tdegree2) {
    let t4084 = nelems*t4082
    let t4083 = ((t4084*tdegree2)*eatom3_f.s0.inverse basis function index) + (eatom3_f.s0.rbf_v*t4084)
    for (eatom3_f.s0.type, 0, nelems) {
     let t4085 = (eatom3_f.s0.type*t4082) + t4083
     for (eatom3_f.s0.inter, 0, nelemsCombos) {
      let t4086 = (eatom3_f.s0.inter*natom) + t4085
      for (eatom3_f.s0.atom, 0, natom) {
       eatom3_f[eatom3_f.s0.atom + t4086] = 0.000000
      }
     }
    }
   }
  }
  consume energyij_f {
   let t4089 = (-1 - nelemsCombos)*natom
   let t4087 = natom*nl
   for (eatom3_f.s1.r98$4, 0, natom) {
    let eatom3_f.s1.r98$w.new_min.s = min(pairnumsum[eatom3_f.s1.r98$4], npairs)
    let eatom3_f.s1.r98$w.new_max.s = let t4307 = pairnumsum[eatom3_f.s1.r98$4 + 1] in max(min(min(max(min(npairs, t4307), 0) + -1, t4307), npairs), eatom3_f.s1.r98$w.new_min.s)
    let t4098 = y.stride.1*2
    let t4099 = max(eatom3_f.s1.r98$w.new_min.s, 0)
    let t4100 = natom*nelemsCombos
    let t4091 = max(eatom3_f.s1.r98$w.new_max.s, 0) - t4099
    for (eatom3_f.s1.r98$w.rebased, 0, t4091) {
     let eatom3_f.s1.r98$z.new_max.s = min(pairnumsum[eatom3_f.s1.r98$4 + 1], npairs)
     let t4108 = eatom3_f.s1.r98$w.rebased + t4099
     let t4109 = nelems*t4100
     let t4101 = max(eatom3_f.s1.r98$z.new_max.s, 0)
     for (eatom3_f.s1.r98$z, 0, t4101) {
      if (let t4308 = pairnumsum[eatom3_f.s1.r98$4 + 1] in ((t4108 < min(t4308, eatom3_f.s1.r98$z)) && (t4108 < t4308))) {
       if (t4108 < pairnumsum[eatom3_f.s1.r98$4 + 1]) {
        let t4113 = forceij_f.s2.basis function index.max.s*t4108
        let t4114 = eatom3_f.s1.r98$z*forceij_f.s2.basis function index.max.s
        for (eatom3_f.s1.r98$y, 0, tdegree2) {
         let t4116 = t4109*tdegree2
         let t4115 = eatom3_f.s1.r98$y*t4109
         let t4120 = eatom3_f.s1.r98$y + t4114
         let t4119 = eatom3_f.s1.r98$y + t4113
         for (eatom3_f.s1.r98$x, 0, adegreep + 1) {
          let t3755.s = min(pairlist[eatom3_f.s1.r98$z], t4087 + -1)
          let t3756.s = min(pairlist[t4108], t4087 + -1)
          let t3757 = (eatom3_f.s1.r98$x*t4116) + (((max(min(interactions[(max(min(atomtype[max(min(alist[max(t3755.s, 0)], natom + -1), 0)], nelems), 1) + ((max(min(atomtype[max(min(alist[max(t3756.s, 0)], natom + -1), 0)], nelems), 1) + -1)*interactions.stride.1)) + -1], nelemsCombos), 1)*natom) + (((max(min(atomtype[eatom3_f.s1.r98$4], nelems), 1)*t4100) + t4089) + eatom3_f.s1.r98$4)) + t4115)
          let t3758 = y[eatom3_f.s1.r98$4 + t4098]
          let t3759.s = y[max(t3756.s, 0) + t4098]
          let t3760.s = y[max(t3755.s, 0) + t4098]
          let t3761 = y[eatom3_f.s1.r98$4]
          let t3762.s = y[max(t3756.s, 0)]
          let t3763.s = y[max(t3755.s, 0)]
          let t3764 = y[eatom3_f.s1.r98$4 + y.stride.1]
          let t3765.s = y[max(t3756.s, 0) + y.stride.1]
          let t3766.s = y[max(t3755.s, 0) + y.stride.1]
          let t3885 = t3759.s - t3758
          let t3886 = t3760.s - t3758
          let t3887 = t3762.s - t3761
          let t3888 = t3763.s - t3761
          let t3889 = t3765.s - t3764
          let t3890 = t3766.s - t3764
          eatom3_f[t3757] = eatom3_f[t3757] + ((float64)cos_f64((float64)acos_f64(max(min(((t3885*t3886) + ((t3887*t3888) + (t3889*t3890)))/((float64)sqrt_f64((t3885*t3885) + ((t3887*t3887) + (t3889*t3889)))*(float64)sqrt_f64((t3886*t3886) + ((t3888*t3888) + (t3890*t3890)))), 1.000000), -1.000000))*float64(eatom3_f.s1.r98$x))*(energyij_f[t4119]*energyij_f[t4120]))
         }
        }
       }
      }
     }
    }
   }
  }
 }
 produce eatom3 {
  consume eatom3_f {
   for (eatom3.s0.ozzz, 0, tdegree2) {
    let t4125 = natom*nelemsCombos
    let t4124 = eatom3.s0.ozzz*eatom3.stride.4
    for (eatom3.s0.ozz, 0, adegreep + 1) {
     let t4128 = nelems*t4125
     let t4126 = (eatom3.s0.ozzz*t4128) + ((t4128*tdegree2)*eatom3.s0.ozz)
     let t4127 = (eatom3.s0.ozz*eatom3.stride.3) + t4124
     for (eatom3.s0.oz, 0, nelems) {
      let t4129 = (eatom3.s0.oz*t4125) + t4126
      let t4130 = (eatom3.s0.oz*eatom3.stride.2) + t4127
      for (eatom3.s0.oy, 0, nelemsCombos) {
       let t4131 = (eatom3.s0.oy*natom) + t4129
       let t4132 = (eatom3.s0.oy*eatom3.stride.1) + t4130
       for (eatom3.s0.ox, 0, natom) {
        eatom3[eatom3.s0.ox + t4132] = eatom3_f[eatom3.s0.ox + t4131]
       }
      }
     }
    }
   }
  }
 }
 free eatom3_f
 allocate fatom3_f[float64 * 3 * natom * nelemsCombos * nelems * tdegree2 * (adegreep + 1)]
 produce fatom3_f {
  for (fatom3_f.s0.inverse basis function index, 0, adegreep + 1) {
   let t4136 = natom*nelemsCombos
   for (fatom3_f.s0.rbf_v, 0, tdegree2) {
    let t4138 = nelems*t4136
    let t4137 = (((t4138*tdegree2)*fatom3_f.s0.inverse basis function index) + (fatom3_f.s0.rbf_v*t4138))*3
    for (fatom3_f.s0.type, 0, nelems) {
     let t4139 = ((fatom3_f.s0.type*t4136)*3) + t4137
     for (fatom3_f.s0.inter, 0, nelemsCombos) {
      let t4140 = ((fatom3_f.s0.inter*natom)*3) + t4139
      for (fatom3_f.s0.atom, 0, natom) {
       let t4141 = (fatom3_f.s0.atom*3) + t4140
       for (fatom3_f.s0.dim, 0, 3) {
        fatom3_f[fatom3_f.s0.dim + t4141] = 0.000000
       }
      }
     }
    }
   }
  }
  consume forceij_f {
   consume energyij_f {
    let t4144 = ((nelemsCombos + 1)*natom)*-3
    let t4142 = natom*nl
    for (fatom3_f.s1.dim, 0, 3) {
     let t4153 = natom*nelemsCombos
     let t4152 = (forceij_f.s2.basis function index.max.s*npairs)*fatom3_f.s1.dim
     let t4151 = fatom3_f.s1.dim*y.stride.1
     let t4148 = fatom3_f.s1.dim + t4144
     for (fatom3_f.s1.r98$4, 0, natom) {
      let fatom3_f.s1.r98$w.new_min.s = min(pairnumsum[fatom3_f.s1.r98$4], npairs)
      let fatom3_f.s1.r98$w.new_max.s = let t4309 = pairnumsum[fatom3_f.s1.r98$4 + 1] in max(min(min(max(min(npairs, t4309), 0) + -1, t4309), npairs), fatom3_f.s1.r98$w.new_min.s)
      let t4163 = y.stride.1*2
      let t4164 = max(fatom3_f.s1.r98$w.new_min.s, 0)
      let t4165 = nelems*t4153
      let t4154 = max(fatom3_f.s1.r98$w.new_max.s, 0) - t4164
      for (fatom3_f.s1.r98$w.rebased, 0, t4154) {
       let fatom3_f.s1.r98$z.new_max.s = min(pairnumsum[fatom3_f.s1.r98$4 + 1], npairs)
       let t4175 = fatom3_f.s1.r98$w.rebased + t4164
       let t4176 = forceij_f.s2.basis function index.max.s*t4175
       let t4166 = max(fatom3_f.s1.r98$z.new_max.s, 0)
       for (fatom3_f.s1.r98$z, 0, t4166) {
        if (let t4310 = pairnumsum[fatom3_f.s1.r98$4 + 1] in ((t4175 < min(t4310, fatom3_f.s1.r98$z)) && (t4175 < t4310))) {
         if (t4175 < pairnumsum[fatom3_f.s1.r98$4 + 1]) {
          let t4185 = fatom3_f.s1.r98$z*forceij_f.s2.basis function index.max.s
          let t4183 = t4152 + t4185
          let t4184 = t4152 + t4176
          for (fatom3_f.s1.r98$y, 0, tdegree2) {
           let t4187 = (fatom3_f.s1.r98$y*t4165)*3
           let t4188 = t4165*tdegree2
           let t4192 = fatom3_f.s1.r98$y + t4185
           let t4195 = fatom3_f.s1.r98$y + t4184
           let t4194 = fatom3_f.s1.r98$y + t4183
           let t4191 = fatom3_f.s1.r98$y + t4176
           for (fatom3_f.s1.r98$x, 0, adegreep + 1) {
            let t3775.s = min(pairlist[fatom3_f.s1.r98$z], t4142 + -1)
            let t3776.s = min(pairlist[t4175], t4142 + -1)
            let t3777 = ((fatom3_f.s1.r98$x*t4188)*3) + ((((max(min(interactions[(max(min(atomtype[max(min(alist[max(t3775.s, 0)], natom + -1), 0)], nelems), 1) + ((max(min(atomtype[max(min(alist[max(t3776.s, 0)], natom + -1), 0)], nelems), 1) + -1)*interactions.stride.1)) + -1], nelemsCombos), 1)*natom)*3) + ((fatom3_f.s1.r98$4*3) + (((max(min(atomtype[fatom3_f.s1.r98$4], nelems), 1)*t4153)*3) + t4148))) + t4187)
            let t3778 = y[fatom3_f.s1.r98$4 + t4163]
            let t3779.s = y[max(t3776.s, 0) + t4163]
            let t3780.s = y[max(t3775.s, 0) + t4163]
            let t3781 = y[fatom3_f.s1.r98$4]
            let t3782.s = y[max(t3776.s, 0)]
            let t3783.s = y[max(t3775.s, 0)]
            let t3784 = y[fatom3_f.s1.r98$4 + y.stride.1]
            let t3785.s = y[max(t3776.s, 0) + y.stride.1]
            let t3786.s = y[max(t3775.s, 0) + y.stride.1]
            let t3787 = let t4311 = (t3779.s - t3778) in (let t4312 = (t3782.s - t3781) in (let t4313 = (t3785.s - t3784) in ((t4311*t4311) + ((t4312*t4312) + (t4313*t4313)))))
            let t3788 = (float64)sqrt_f64(t3787)
            let t3789 = let t4314 = (t3780.s - t3778) in (let t4315 = (t3783.s - t3781) in (let t4316 = (t3786.s - t3784) in ((t4314*t4314) + ((t4315*t4315) + (t4316*t4316)))))
            let t3790 = (float64)sqrt_f64(t3789)
            let t3792.s = (((t3779.s - t3778)*(t3780.s - t3778)) + (((t3782.s - t3781)*(t3783.s - t3781)) + ((t3785.s - t3784)*(t3786.s - t3784))))/(t3788*t3790)
            let t3793 = (float64)acos_f64(max(min(t3792.s, 1.000000), -1.000000))*float64(fatom3_f.s1.r98$x)
            let t3797 = energyij_f[t4191]
            let t3798 = energyij_f[t4192]
            let t3800.s = (((t3780.s - t3778)*(t3779.s - t3778)) + (((t3783.s - t3781)*(t3782.s - t3781)) + ((t3786.s - t3784)*(t3785.s - t3784))))/(t3788*t3790)
            let t3801 = (float64)acos_f64(max(min(t3800.s, 1.000000), -1.000000))*float64(fatom3_f.s1.r98$x)
            let t3803 = y[fatom3_f.s1.r98$4 + t4151]
            let t3804.s = y[max(t3776.s, 0) + t4151]
            let t3805.s = y[max(t3775.s, 0) + t4151]
            let t3905 = t3797*t3798
            let t3906 = max(min(t3800.s, 1.000000), -1.000000)
            let t3907 = t3804.s - t3803
            let t3908 = t3788*t3790
            let t3909 = t3805.s - t3803
            let t3910 = max(min(t3792.s, 1.000000), -1.000000)
            fatom3_f[t3777] = fatom3_f[t3777] + ((((float64)cos_f64(t3793)*(forceij_f[t4194]*t3797)) + ((((-1.000000/max((float64)sqrt_f64(1.000000 - (t3906*t3906)), 0.000000))*((float64)sin_f64(t3801)*float64((0 - fatom3_f.s1.r98$x))))*((1.000000/((float64)pow_f64(t3789, 1.500000)*t3788))*((t3789*t3907) - ((t3906*t3908)*t3909))))*t3905)) + (((float64)cos_f64(t3801)*(forceij_f[t4195]*t3798)) + ((((-1.000000/max((float64)sqrt_f64(1.000000 - (t3910*t3910)), 0.000000))*((float64)sin_f64(t3793)*float64((0 - fatom3_f.s1.r98$x))))*((1.000000/((float64)pow_f64(t3787, 1.500000)*t3790))*((t3787*t3909) - ((t3908*t3910)*t3907))))*t3905)))
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  consume forceij_f {
   consume energyij_f {
    let t4198 = ((nelemsCombos + 1)*natom)*-3
    let t4196 = natom*nl
    for (fatom3_f.s2.dim, 0, 3) {
     let t4207 = natom*nelemsCombos
     let t4206 = (forceij_f.s2.basis function index.max.s*npairs)*fatom3_f.s2.dim
     let t4205 = fatom3_f.s2.dim*y.stride.1
     let t4202 = fatom3_f.s2.dim + t4198
     for (fatom3_f.s2.r98$4, 0, natom) {
      let fatom3_f.s2.r98$w.new_min.s = min(pairnumsum[fatom3_f.s2.r98$4], npairs)
      let fatom3_f.s2.r98$w.new_max.s = let t4317 = pairnumsum[fatom3_f.s2.r98$4 + 1] in max(min(min(max(min(npairs, t4317), 0) + -1, t4317), npairs), fatom3_f.s2.r98$w.new_min.s)
      let t4216 = y.stride.1*2
      let t4217 = max(fatom3_f.s2.r98$w.new_min.s, 0)
      let t4218 = nelems*t4207
      let t4208 = max(fatom3_f.s2.r98$w.new_max.s, 0) - t4217
      for (fatom3_f.s2.r98$w.rebased, 0, t4208) {
       let fatom3_f.s2.r98$z.new_max.s = min(pairnumsum[fatom3_f.s2.r98$4 + 1], npairs)
       let t4226 = fatom3_f.s2.r98$w.rebased + t4217
       let t4219 = max(fatom3_f.s2.r98$z.new_max.s, 0)
       for (fatom3_f.s2.r98$z, 0, t4219) {
        if (let t4318 = pairnumsum[fatom3_f.s2.r98$4 + 1] in ((t4226 < min(t4318, fatom3_f.s2.r98$z)) && (t4226 < t4318))) {
         if (t4226 < pairnumsum[fatom3_f.s2.r98$4 + 1]) {
          let t4230 = forceij_f.s2.basis function index.max.s*t4226
          let t4232 = fatom3_f.s2.r98$z*forceij_f.s2.basis function index.max.s
          for (fatom3_f.s2.r98$y, 0, tdegree2) {
           let t4233 = (fatom3_f.s2.r98$y*t4218)*3
           let t4234 = t4218*tdegree2
           let t4239 = (t4206 + t4232) + fatom3_f.s2.r98$y
           let t4240 = fatom3_f.s2.r98$y + t4232
           let t4237 = fatom3_f.s2.r98$y + t4230
           for (fatom3_f.s2.r98$x, 0, adegreep + 1) {
            let t3810.s = min(pairlist[fatom3_f.s2.r98$z], t4196 + -1)
            let t3811.s = min(alist[max(t3810.s, 0)], natom + -1)
            let t3812.s = min(pairlist[t4226], t4196 + -1)
            let t3813 = let t4319 = max(t3811.s, 0) in (((fatom3_f.s2.r98$x*t4234)*3) + (((t4319*3) + (((max(min(interactions[(max(min(atomtype[t4319], nelems), 1) + ((max(min(atomtype[max(min(alist[max(t3812.s, 0)], natom + -1), 0)], nelems), 1) + -1)*interactions.stride.1)) + -1], nelemsCombos), 1)*natom)*3) + (((max(min(atomtype[fatom3_f.s2.r98$4], nelems), 1)*t4207)*3) + t4202))) + t4233))
            let t3814 = y[fatom3_f.s2.r98$4 + t4216]
            let t3815.s = y[max(t3812.s, 0) + t4216]
            let t3816.s = y[max(t3810.s, 0) + t4216]
            let t3817 = y[fatom3_f.s2.r98$4]
            let t3818.s = y[max(t3812.s, 0)]
            let t3819.s = y[max(t3810.s, 0)]
            let t3820 = y[fatom3_f.s2.r98$4 + y.stride.1]
            let t3821.s = y[max(t3812.s, 0) + y.stride.1]
            let t3822.s = y[max(t3810.s, 0) + y.stride.1]
            let t3823 = let t4320 = (t3815.s - t3814) in (let t4321 = (t3818.s - t3817) in (let t4322 = (t3821.s - t3820) in (float64)sqrt_f64((t4320*t4320) + ((t4321*t4321) + (t4322*t4322)))))
            let t3824 = let t4323 = (t3816.s - t3814) in (let t4324 = (t3819.s - t3817) in (let t4325 = (t3822.s - t3820) in ((t4323*t4323) + ((t4324*t4324) + (t4325*t4325)))))
            let t3825.s = (float64)sqrt_f64(t3824)
            let t3827 = energyij_f[t4237]
            let t3828.s = (((t3816.s - t3814)*(t3815.s - t3814)) + (((t3819.s - t3817)*(t3818.s - t3817)) + ((t3822.s - t3820)*(t3821.s - t3820))))/(t3823*t3825.s)
            let t3830 = y[fatom3_f.s2.r98$4 + t4205]
            let t3921 = t3823*t3825.s
            let t3923 = max(min(t3828.s, 1.000000), -1.000000)
            fatom3_f[t3813] = fatom3_f[t3813] - (((float64)cos_f64((float64)acos_f64(max(min((((t3815.s - t3814)*(t3816.s - t3814)) + (((t3818.s - t3817)*(t3819.s - t3817)) + ((t3821.s - t3820)*(t3822.s - t3820))))/t3921, 1.000000), -1.000000))*float64(fatom3_f.s2.r98$x))*(forceij_f[t4239]*t3827)) + ((energyij_f[t4240]*t3827)*(((-1.000000/max((float64)sqrt_f64(1.000000 - (t3923*t3923)), 0.000000))*((float64)sin_f64((float64)acos_f64(t3923)*float64(fatom3_f.s2.r98$x))*float64((0 - fatom3_f.s2.r98$x))))*((1.000000/((float64)pow_f64(t3824, 1.500000)*t3823))*(((y[max(t3812.s, 0) + t4205] - t3830)*t3824) - ((t3921*t3923)*(y[max(t3810.s, 0) + t4205] - t3830)))))))
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  consume forceij_f {
   consume energyij_f {
    let t4243 = ((nelemsCombos + 1)*natom)*-3
    let t4241 = natom*nl
    for (fatom3_f.s3.dim, 0, 3) {
     let t4252 = natom*nelemsCombos
     let t4251 = (forceij_f.s2.basis function index.max.s*npairs)*fatom3_f.s3.dim
     let t4250 = fatom3_f.s3.dim*y.stride.1
     let t4247 = fatom3_f.s3.dim + t4243
     for (fatom3_f.s3.r98$4, 0, natom) {
      let fatom3_f.s3.r98$w.new_min.s = min(pairnumsum[fatom3_f.s3.r98$4], npairs)
      let fatom3_f.s3.r98$w.new_max.s = let t4326 = pairnumsum[fatom3_f.s3.r98$4 + 1] in max(min(min(max(min(npairs, t4326), 0) + -1, t4326), npairs), fatom3_f.s3.r98$w.new_min.s)
      let t4261 = y.stride.1*2
      let t4262 = max(fatom3_f.s3.r98$w.new_min.s, 0)
      let t4263 = nelems*t4252
      let t4253 = max(fatom3_f.s3.r98$w.new_max.s, 0) - t4262
      for (fatom3_f.s3.r98$w.rebased, 0, t4253) {
       let fatom3_f.s3.r98$z.new_max.s = min(pairnumsum[fatom3_f.s3.r98$4 + 1], npairs)
       let t4271 = fatom3_f.s3.r98$w.rebased + t4262
       let t4264 = max(fatom3_f.s3.r98$z.new_max.s, 0)
       for (fatom3_f.s3.r98$z, 0, t4264) {
        if (let t4327 = pairnumsum[fatom3_f.s3.r98$4 + 1] in ((t4271 < min(t4327, fatom3_f.s3.r98$z)) && (t4271 < t4327))) {
         if (t4271 < pairnumsum[fatom3_f.s3.r98$4 + 1]) {
          let t4279 = forceij_f.s2.basis function index.max.s*t4271
          let t4275 = fatom3_f.s3.r98$z*forceij_f.s2.basis function index.max.s
          let t4277 = t4251 + t4279
          for (fatom3_f.s3.r98$y, 0, tdegree2) {
           let t4280 = (fatom3_f.s3.r98$y*t4263)*3
           let t4281 = t4263*tdegree2
           let t4287 = fatom3_f.s3.r98$y + t4279
           let t4286 = fatom3_f.s3.r98$y + t4277
           let t4284 = fatom3_f.s3.r98$y + t4275
           for (fatom3_f.s3.r98$x, 0, adegreep + 1) {
            let t3835.s = min(pairlist[fatom3_f.s3.r98$z], t4241 + -1)
            let t3836.s = min(pairlist[t4271], t4241 + -1)
            let t3837.s = min(alist[max(t3836.s, 0)], natom + -1)
            let t3838 = let t4328 = max(t3837.s, 0) in (((fatom3_f.s3.r98$x*t4281)*3) + ((((max(min(interactions[(max(min(atomtype[max(min(alist[max(t3835.s, 0)], natom + -1), 0)], nelems), 1) + ((max(min(atomtype[t4328], nelems), 1) + -1)*interactions.stride.1)) + -1], nelemsCombos), 1)*natom)*3) + ((t4328*3) + (((max(min(atomtype[fatom3_f.s3.r98$4], nelems), 1)*t4252)*3) + t4247))) + t4280))
            let t3839 = y[fatom3_f.s3.r98$4 + t4261]
            let t3840.s = y[max(t3835.s, 0) + t4261]
            let t3841.s = y[max(t3836.s, 0) + t4261]
            let t3842 = y[fatom3_f.s3.r98$4]
            let t3843.s = y[max(t3835.s, 0)]
            let t3844.s = y[max(t3836.s, 0)]
            let t3845 = y[fatom3_f.s3.r98$4 + y.stride.1]
            let t3846.s = y[max(t3835.s, 0) + y.stride.1]
            let t3847.s = y[max(t3836.s, 0) + y.stride.1]
            let t3848 = let t4329 = (t3840.s - t3839) in (let t4330 = (t3843.s - t3842) in (let t4331 = (t3846.s - t3845) in (float64)sqrt_f64((t4329*t4329) + ((t4330*t4330) + (t4331*t4331)))))
            let t3849 = let t4332 = (t3841.s - t3839) in (let t4333 = (t3844.s - t3842) in (let t4334 = (t3847.s - t3845) in ((t4332*t4332) + ((t4333*t4333) + (t4334*t4334)))))
            let t3850.s = (float64)sqrt_f64(t3849)
            let t3852 = energyij_f[t4284]
            let t3853.s = (((t3841.s - t3839)*(t3840.s - t3839)) + (((t3844.s - t3842)*(t3843.s - t3842)) + ((t3847.s - t3845)*(t3846.s - t3845))))/(t3848*t3850.s)
            let t3855 = y[fatom3_f.s3.r98$4 + t4250]
            let t3935 = t3848*t3850.s
            let t3937 = max(min(t3853.s, 1.000000), -1.000000)
            fatom3_f[t3838] = fatom3_f[t3838] - (((float64)cos_f64((float64)acos_f64(max(min((((t3840.s - t3839)*(t3841.s - t3839)) + (((t3843.s - t3842)*(t3844.s - t3842)) + ((t3846.s - t3845)*(t3847.s - t3845))))/t3935, 1.000000), -1.000000))*float64(fatom3_f.s3.r98$x))*(forceij_f[t4286]*t3852)) + ((energyij_f[t4287]*t3852)*(((-1.000000/max((float64)sqrt_f64(1.000000 - (t3937*t3937)), 0.000000))*((float64)sin_f64((float64)acos_f64(t3937)*float64(fatom3_f.s3.r98$x))*float64((0 - fatom3_f.s3.r98$x))))*((1.000000/((float64)pow_f64(t3849, 1.500000)*t3848))*(((y[max(t3835.s, 0) + t4250] - t3855)*t3849) - ((t3935*t3937)*(y[max(t3836.s, 0) + t4250] - t3855)))))))
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  free energyij_f
  free forceij_f
 }
 produce fatom3 {
  consume fatom3_f {
   for (fatom3.s0.ozzzz, 0, tdegree2) {
    let t4292 = natom*nelemsCombos
    let t4291 = fatom3.s0.ozzzz*fatom3.stride.5
    for (fatom3.s0.ozzz, 0, adegreep + 1) {
     let t4295 = nelems*t4292
     let t4293 = ((fatom3.s0.ozzzz*t4295) + ((t4295*tdegree2)*fatom3.s0.ozzz))*3
     let t4294 = (fatom3.s0.ozzz*fatom3.stride.4) + t4291
     for (fatom3.s0.ozz, 0, nelems) {
      let t4296 = ((fatom3.s0.ozz*t4292)*3) + t4293
      let t4297 = (fatom3.s0.ozz*fatom3.stride.3) + t4294
      for (fatom3.s0.oz, 0, nelemsCombos) {
       let t4298 = ((fatom3.s0.oz*natom)*3) + t4296
       let t4299 = (fatom3.s0.oz*fatom3.stride.2) + t4297
       for (fatom3.s0.oy, 0, natom) {
        let t4301 = (fatom3.s0.oy*fatom3.stride.1) + t4299
        let t4300 = (fatom3.s0.oy*3) + t4298
        for (fatom3.s0.ox, 0, 3) {
         fatom3[fatom3.s0.ox + t4301] = fatom3_f[fatom3.s0.ox + t4300]
        }
       }
      }
     }
    }
   }
  }
 }
 free fatom3_f
}
}


